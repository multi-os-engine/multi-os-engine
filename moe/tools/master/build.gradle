/*
Copyright 2014-2016 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.8.10" apply false
}

allprojects {
    repositories {
        mavenCentral()
    }
}

ext {
    external = [:]
    external.prebuilts = file('../../../prebuilts').absolutePath
}

/*
 * PROJECT: external/libffi
 */
for (target in [[name: 'ios'],
                [name: 'macos'],
                [name: 'windows']]) {
    task("prebuild_libffi_$target.name", type: Exec) {
        workingDir external.prebuilts
        executable './gradlew'
        args ":external/libffi:prebuild_${target.name}"

        def log = file("build/prebuild_libffi_${target.name}.log")
        mkdir log.parentFile
        FileOutputStream ostream = new FileOutputStream(log);
        setErrorOutput(ostream)
        setStandardOutput(ostream)
    }
}

/*
 * PROJECT: external/libimobiledevice/libimobiledevice
 */
ext {
    external.libimobiledevice = [:]
    external.libimobiledevice.root = "${external.prebuilts}/external/libimobiledevice/libimobiledevice"
    external.libimobiledevice.jnipath = file("${external.libimobiledevice.root}/build/macos")
}
for (target in [[name: 'macos', outputs: ["${external.libimobiledevice.root}/build/macos/libimobiledevice.dylib"]],
                [name: 'windows', outputs: ["${external.libimobiledevice.root}/build/windows/x86_64-w64-mingw32/libimobiledevice.dll"]],
                [name: 'linux', outputs: ["${external.libimobiledevice.root}/build/linux/libimobiledevice.so"]]]) {
    external.libimobiledevice[target.name] = target.outputs.collect { file(it) }

    task("prebuild_libimobiledevice_${target.name}", type: Exec) {
        workingDir external.prebuilts
        executable './gradlew'
        args ":external:libimobiledevice:libimobiledevice:prebuild_${target.name}"

        def log = file("build/prebuild_libimobiledevice_${target.name}.log")
        mkdir log.parentFile
        FileOutputStream ostream = new FileOutputStream(log);
        setErrorOutput(ostream)
        setStandardOutput(ostream)
    }
}

/*
 * PROJECT: moe/natj/natj
 */
ext {
    external.natj = [:]
    external.natj.root = file('../../natj/natj').absolutePath
    external.natj.jar = file("${external.natj.root}/build/libs/natj-1.1.5.jar")
    external.natj.jnipath = file("${external.natj.root}/natj-mac/build/xcode/Release")
}
for (target in [[name: 'ios', outputs: ["${external.natj.root}/natj-ios/build/xcode/Release-iphoneos/libnatj.a",
                                        "${external.natj.root}/natj-ios/build/xcode/Release-iphonesimulator/libnatj.a"]],
                [name: 'mac', outputs: ["${external.natj.root}/natj-mac/build/xcode/Release/libnatj.dylib"]],
                [name: 'win', outputs: ["${external.natj.root}/natj-win/build/Release-Win64/natj.dll"]],
                [name: 'linux', outputs: ["${external.natj.root}/natj-linux/build/Release/libnatj.so"]],
                [name: 'api', outputs: [external.natj.jar.absolutePath], task: 'jar']]) {
    external.natj[target.name] = target.outputs.collect { file(it) }

    task("build_ext_natj_${target.name}", type: Exec) {
        workingDir external.natj.root
        executable './gradlew'
        if (target.task != null) {
            args "${target.task}"
        } else {
            args ":natj-${target.name}:build"
        }

        def log = file("build/ext_natj_${target.name}.log")
        mkdir log.parentFile
        FileOutputStream ostream = new FileOutputStream(log);
        setErrorOutput(ostream)
        setStandardOutput(ostream)
    }

    task("ext_natj_${target.name}") {
        if (project.hasProperty('moe.external.rebuild.natj') ||
                target.outputs.findAll() { !file(it).exists() }.size() > 0 ||
                !external.natj.jar.exists()) {
            dependsOn "build_ext_natj_${target.name}"
        }
    }
}

/*
 * PROJECT: moe/moe-core
 */
ext {
    external.moe_core = [:]
    external.moe_core.root = file('../../moe-core').absolutePath
    external.moe_core.out = [:]
    external.moe_core.out.moe_ios_jar = file("${external.moe_core.root}/moe.apple/moe.platform.ios/build/libs/moe-ios.jar")
    external.moe_core.out.moe_ios_javadoc_jar = file("${external.moe_core.root}/moe.apple/moe.platform.ios/build/libs/moe-ios-javadoc.jar")
    external.moe_core.out.moe_ios_sources_jar = file("${external.moe_core.root}/moe.apple/moe.platform.ios/build/libs/moe-ios-sources.jar")
    external.moe_core.out.moe_ios_junit_jar = file("${external.moe_core.root}/moe.apple/moe.platform.ios.junit/build/libs/moe-ios-junit.jar")
    external.moe_core.out.moe_ios_junit_javadoc_jar = file("${external.moe_core.root}/moe.apple/moe.platform.ios.junit/build/libs/moe-ios-junit-javadoc.jar")
    external.moe_core.out.moe_ios_junit_sources_jar = file("${external.moe_core.root}/moe.apple/moe.platform.ios.junit/build/libs/moe-ios-junit-sources.jar")
    external.moe_core.out.moe_core_jar = file("${external.moe_core.root}/moe.apple/moe.core.java/build/libs/core/moe-core.jar")
    external.moe_core.out.moe_core_javadoc_jar = file("${external.moe_core.root}/moe.apple/moe.core.java/build/libs/core/moe-core-javadoc.jar")
    external.moe_core.out.moe_core_sources_jar = file("${external.moe_core.root}/moe.apple/moe.core.java/build/libs/core/moe-core-sources.jar")
    external.moe_core.out.jni_config_base_json = file("${external.moe_core.root}/moe.apple/tools/jni-config-base.json")
    external.moe_core.out.reflection_config_base_json = file("${external.moe_core.root}/moe.apple/tools/reflection-config-base.json")
    external.moe_core.out.proguard_full_cfg = file("${external.moe_core.root}/moe.apple/tools/proguard-full.cfg")
    external.moe_core.out.proguard_cfg = file("${external.moe_core.root}/moe.apple/tools/proguard.cfg")

    if (project.hasProperty('moe.moe_core.sdk.debug')) {
        external.moe_core.out.iphoneos_libmoe = file("${external.moe_core.root}/moe.apple/moe.core.native/moe.sdk/build/xcode/Debug-ios-iphoneos/libmoe.a")
        external.moe_core.out.iphoneos_libmoe_headers = file("${external.moe_core.root}/moe.apple/moe.core.native/moe.sdk/build/xcode/Debug-ios-iphoneos/include")
        external.moe_core.out.iphonesimulator_libmoe = file("${external.moe_core.root}/moe.apple/moe.core.native/moe.sdk/build/xcode/Debug-ios-iphonesimulator/libmoe.a")
        external.moe_core.out.iphonesimulator_libmoe_headers = file("${external.moe_core.root}/moe.apple/moe.core.native/moe.sdk/build/xcode/Debug-ios-iphonesimulator/include")
    } else {
        external.moe_core.out.iphoneos_libmoe = file("${external.moe_core.root}/moe.apple/moe.core.native/moe.sdk/build/xcode/Release-ios-iphoneos/libmoe.a")
        external.moe_core.out.iphoneos_libmoe_headers = file("${external.moe_core.root}/moe.apple/moe.core.native/moe.sdk/build/xcode/Release-ios-iphoneos/include")
        external.moe_core.out.iphonesimulator_libmoe = file("${external.moe_core.root}/moe.apple/moe.core.native/moe.sdk/build/xcode/Release-ios-iphonesimulator/libmoe.a")
        external.moe_core.out.iphonesimulator_libmoe_headers = file("${external.moe_core.root}/moe.apple/moe.core.native/moe.sdk/build/xcode/Release-ios-iphonesimulator/include")
    }
}

task("build_ext_moe_core", type: Exec) {
    workingDir external.moe_core.root
    executable './gradlew'
    args "build"

    def log = file("build/ext_moe_core.log")
    mkdir log.parentFile
    FileOutputStream ostream = new FileOutputStream(log);
    setErrorOutput(ostream)
    setStandardOutput(ostream)
}

task("ext_moe_core") {
    if (project.hasProperty('moe.external.rebuild.moe_core') ||
            ((java.util.Map) external.moe_core.out).entrySet().findAll() { !file(it.value).exists() }.size() > 0) {
        dependsOn "build_ext_moe_core"
    }
}

/*
 * PROJECT: external/llvm
 */
ext {
    external.llvm = [:]
    external.llvm.root = file("${external.prebuilts}/llvm/macos").absolutePath
    external.llvm.jnipath = file("${external.llvm.root}/lib")
    external.llvm.macos = file("${external.llvm.root}/lib/libclang.dylib")

    if (!external.llvm.macos.exists()) {
        logger.warn("WARNING: libclang is missing from $external.llvm.macos.absolutePath")
    }
}
