/*
Copyright (C) 2016 Migeran

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

plugins {
    id "com.jfrog.bintray" version "1.7"
}

group 'org.multi-os-engine'

String loadPluginVersion() {
    final Properties props = new Properties()
    props.load(new FileInputStream(file('src/main/resources/org/moe/gradle/moe.properties')))
    return props.getProperty('MOE-Plugin-Version')
}

version loadPluginVersion()

apply plugin: 'java'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8

repositories {
    if (System.getenv('MOE_REPO') != null) {
        maven { url(file(System.getenv('MOE_REPO')).toURI()) }
    } else {
        mavenLocal()
    }
    mavenCentral()
}

configurations {
    included
}

def includedDeps = [
        dependencies.create('org.moe:moeCommonUtils:1.1.+'),
        dependencies.create('org.moe:moeDocumentPbxproj:1.1.+'),
        dependencies.create('org.moe:moeProjectGenerator:1.3.+'),
]

includedDeps.each {
    configurations.included.dependencies.add(it)
}

def includedDepFiles = new HashSet()
project.getRepositories().add(project.getRepositories().mavenLocal())
includedDeps.collect() { dep ->
    def files = configurations.included.files(dep)
    files.findAll() { file -> includedDeps.find { d -> file.name.contains(d.name) } }.flatten().each() {
        includedDepFiles.add(it)
    }
}

dependencies {
    compile gradleApi()

    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.2'
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile group: 'com.jcraft', name: 'jsch', version: '0.1.53'

    compile group: 'org.ow2.asm', name: 'asm', version: '5.1'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile gradleTestKit()

    // Common Utils
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'commons-io:commons-io:2.4'
    compile 'com.jcraft:jsch:0.1.53'
    compile 'com.jcraft:jzlib:1.1.3'

    // Document pbxproj
    compile 'commons-codec:commons-codec:1.9'

    compile files(includedDepFiles)
}

def getRequiredEnv(name) {
    String env = System.getenv(name)
    if (env == null) {
        throw new GradleException("Env $name is not set")
    }
    return env
}

bintray {
    if (project.hasProperty('bintray.user')) {
        user = property('bintray.user')
    }
    if (project.hasProperty('bintray.key')) {
        key = property('bintray.key')
    }

    publications = ['mavenJava']

    pkg {
        repo = 'maven'
        name = 'moe-gradle'
        userOrg = 'multi-os-engine'
        websiteUrl = 'https://multi-os-engine.org'
        vcsUrl = 'https://github.com/multi-os-engine/moe-plugin-gradle'
        licenses = ['Apache-2.0']
        labels = ['moe', 'multi-os-engine']
        publicDownloadNumbers = false

        publish = true

        version {
            name = project.version
        }
    }
}

publishing {
    if (System.getenv('PUBLISH_TARGET_REPO_ADDR') != null) {
        repositories {
            String mvnAddr = getRequiredEnv('PUBLISH_TARGET_REPO_ADDR')
            String mvnUser = getRequiredEnv('PUBLISH_TARGET_REPO_USER')
            String mvnPass = getRequiredEnv('PUBLISH_TARGET_REPO_PASS')
            maven {
                url mvnAddr
                if (mvnUser.length() > 0) {
                    credentials {
                        username = mvnUser
                        password = mvnPass
                    }
                }
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
            group project.group
            artifactId 'moe-gradle'
            version project.version
        }
    }
}

jar {
    from includedDepFiles.collect() {
        it.isDirectory() ? it : zipTree(it)
    }
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

// Add the classpath file to the test runtime classpath
dependencies {
    testRuntime files(createClasspathManifest)
}
