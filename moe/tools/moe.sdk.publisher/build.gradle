/*
Copyright (C) 2016 Migeran

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

buildscript {
    repositories {
        jcenter()
    }
}

group 'org.multi-os-engine.community'
version '2.0.0'

apply plugin: 'base'
apply plugin: 'maven-publish'

if (!rootProject.hasProperty('moe.tools.sdk.win_only')) {
    tasks.build.dependsOn ':ext_natj_mac'
    tasks.build.dependsOn ':prebuild_libimobiledevice_macos'
}

if (!rootProject.hasProperty('moe.tools.sdk.mac_only')) {
    tasks.build.dependsOn ':ext_natj_win'
    tasks.build.dependsOn ':prebuild_libimobiledevice_windows'
}

def projectDeps = [
        ':moe.binding.clang',
        ':moe.binding.libimobiledevice',
        ':moe.generator.natjgen',
        ':moe.ios.device.launcher',
        ':proguard',
]

projectDeps.each { evaluationDependsOn it }

mkdir buildDir

task buildDeps {
    projectDeps.each { dependsOn project(it).tasks.build }
}

tasks.build {
    dependsOn buildDeps
}

def buildfiles(def proj, def subpath, def closure) {
    files("${project(proj).buildDir.absolutePath}/$subpath", closure)
}

def getSDKCopySpec() {
    copySpec {
        into('sdk') {
            from files(rootProject.external.moe_core.out.moe_core_jar) {
                rename rootProject.external.moe_core.out.moe_core_jar.name, 'moe-core.jar'
            }
            from files(rootProject.external.moe_core.out.moe_core_sources_jar) {
                rename rootProject.external.moe_core.out.moe_core_sources_jar.name, 'moe-core-sources.jar'
            }
            from files(rootProject.external.moe_core.out.moe_core_javadoc_jar) {
                rename rootProject.external.moe_core.out.moe_core_javadoc_jar.name, 'moe-core-javadoc.jar'
            }
            from files(rootProject.external.moe_core.out.moe_ios_jar) {
                rename rootProject.external.moe_core.out.moe_ios_jar.name, 'moe-ios.jar'
            }
            from files(rootProject.external.moe_core.out.moe_ios_sources_jar) {
                rename rootProject.external.moe_core.out.moe_ios_sources_jar.name, 'moe-ios-sources.jar'
            }
            from files(rootProject.external.moe_core.out.moe_ios_javadoc_jar) {
                rename rootProject.external.moe_core.out.moe_ios_javadoc_jar.name, 'moe-ios-javadoc.jar'
            }
            from files(rootProject.external.moe_core.out.moe_ios_junit_jar) {
                rename rootProject.external.moe_core.out.moe_ios_junit_jar.name, 'moe-ios-junit.jar'
            }
            from files(rootProject.external.moe_core.out.moe_ios_junit_sources_jar) {
                rename rootProject.external.moe_core.out.moe_ios_junit_sources_jar.name, 'moe-ios-junit-sources.jar'
            }
            from files(rootProject.external.moe_core.out.moe_ios_junit_javadoc_jar) {
                rename rootProject.external.moe_core.out.moe_ios_junit_javadoc_jar.name, 'moe-ios-junit-javadoc.jar'
            }
        }
        into('sdk/iphoneos') {
            from files(rootProject.external.moe_core.out.iphoneos_libmoe) {
                rename rootProject.external.moe_core.out.iphoneos_libmoe.name, 'libmoe.a'
            }
            into('include') {
                into('.') {
                    from files(rootProject.external.moe_core.out.iphoneos_libmoe_headers) {
                        include 'jni.h'
                    }
                }
                into('MOE') {
                    from files(rootProject.external.moe_core.out.iphoneos_libmoe_headers) {
                        exclude 'jni.h'
                    }
                }
            }
        }
        into('sdk/iphonesimulator') {
            from files(rootProject.external.moe_core.out.iphonesimulator_libmoe) {
                rename rootProject.external.moe_core.out.iphonesimulator_libmoe.name, 'libmoe.a'
            }
            into('include') {
                into('.') {
                    from files(rootProject.external.moe_core.out.iphonesimulator_libmoe_headers) {
                        include 'jni.h'
                    }
                }
                into('MOE') {
                    from files(rootProject.external.moe_core.out.iphonesimulator_libmoe_headers) {
                        exclude 'jni.h'
                    }
                }
            }
        }
        into('tools') {
            from buildfiles(':moe.ios.device.launcher', 'libs') {
                include 'moe.ios.device.launcher.jar'
                rename 'moe.ios.device.launcher.jar', 'ios-device.jar'
            }

            from files(rootProject.external.moe_core.out.proguard_cfg.parentFile) {
                include rootProject.external.moe_core.out.jni_config_base_json.name
                include rootProject.external.moe_core.out.reflection_config_base_json.name
                include rootProject.external.moe_core.out.proguard_full_cfg.name
                include rootProject.external.moe_core.out.proguard_cfg.name
            }

            from buildfiles(':moe.generator.natjgen', 'libs') {
                include 'moe.generator.natjgen.jar'
                rename 'moe.generator.natjgen.jar', 'wrapnatjgen.jar'
            }

            from buildfiles(':proguard', 'libs') {
                include 'proguard.jar'
            }

            from files('.') {
                include 'gradlew.zip'
            }
        }

        into('tools/macosx/x86_64') {
            if (!rootProject.hasProperty('moe.tools.sdk.win_only')) {
                from files(external.llvm.macos)
                from files(external.libimobiledevice.macos)
                from files(external.natj.mac)
            } else {
                from files('.placeholder')
            }
        }

        into('tools/windows/x86_64') {
            if (!rootProject.hasProperty('moe.tools.sdk.mac_only')) {
                from files(external.libimobiledevice.windows)
                from files(external.natj.win)
            } else {
                from files('.placeholder')
            }
        }

        eachFile { println "${it}" }
    }
}

task sdk(type: Zip, dependsOn: build) {
    with getSDKCopySpec()
}

task devsdk(type: Copy, dependsOn: build) {
    destinationDir = file("$buildDir/dev-sdk")
    with getSDKCopySpec()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact sdk {}
        }
        mavenJavaSnapshot(MavenPublication) {
            artifact sdk {}
            version = "${project.version}-SNAPSHOT"
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/multi-os-engine-community/moe-sdk-publisher")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
}
