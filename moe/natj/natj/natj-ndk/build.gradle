/*
Copyright 2014-2016 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

if (!"1".equals(System.getenv("NATJ_ENABLE_NDK_BUILD"))) {
    logger.info("Skipping NDK build")
    return;
}

apply plugin: 'base'
apply plugin: 'maven-publish'

def buildNativeTarget() {
    mkdir("build")
    new ByteArrayOutputStream().withStream { os ->
        try {
            exec {
                executable = "./build.sh"
                setIgnoreExitValue false
                standardOutput = os
                errorOutput = os
            }
        } catch (GradleException ex) {
            logger.error(os.toString())
            throw new GradleException("Failed to build native components", ex)
        } finally {
            def writer = new PrintWriter(file("build/build.log"))
            writer.print(os.toString());
            writer.flush();
            writer.close();
        }
    }
}

String[] outputs = []
for (arch in ['arm64-v8a', 'armeabi-v7a', 'mips', 'mips64', 'x86', 'x86_64']) {
    for (conf in ['Release', 'Debug']) {
        for (targ in ['natj', 'c++_shared']) {
            outputs += "build/${conf}/libs/${arch}/lib${targ}.so"
        }
    }
}

task buildNative (/*dependsOn: rootProject.checkNative*/) << {
    buildNativeTarget()
}

buildNative.inputs.files file('../libffi/arm-unknown-linux-androideabi/.libs/libffi.a')
buildNative.inputs.files file('../libffi/mipsel-unknown-linux-android/.libs/libffi.a')
buildNative.inputs.files file('../libffi/i686-pc-linux-android/.libs/libffi.a')
buildNative.inputs.files file('../libffi/aarch64-unknown-linux-android/.libs/libffi.a')
buildNative.inputs.files file('../libffi/mips64el-unknown-linux-android/.libs/libffi.a')
buildNative.inputs.files file('../libffi/x86_64-pc-linux-android/.libs/libffi.a')

buildNative.inputs.files file('jni/Android.mk')
buildNative.inputs.files file('jni/Application.mk')

buildNative.inputs.files fileTree('../src/main/native').getFiles().toArray()
buildNative.outputs.files outputs

tasks.publish.dependsOn(buildNative)

publishing {
    publications {
        mavenNative(MavenPublication) {
            groupId 'org.moe'
            artifactId 'natj-ndk'

            for (o in outputs) {
              def conf = new File(o).getParentFile().getParentFile().getParentFile().getName()
              def arch = new File(o).getParentFile().getName()

              def clser = "$conf-$arch"
              if (new File(o).getName() != "libnatj.so") {
                clser += "-c++"
              }

              artifact source:o, extension:"so", classifier: clser
            }
        }
    }
}
