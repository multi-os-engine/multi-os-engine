/*
Copyright 2014-2016 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


#include <iostream>

#include "dex/compiler_enums.h"

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const OpFeatureFlags& rhs) {
  switch (rhs) {
    case kIsBranch: os << "IsBranch"; break;
    case kNoOperand: os << "NoOperand"; break;
    case kIsUnaryOp: os << "IsUnaryOp"; break;
    case kIsBinaryOp: os << "IsBinaryOp"; break;
    case kIsTertiaryOp: os << "IsTertiaryOp"; break;
    case kIsQuadOp: os << "IsQuadOp"; break;
    case kIsQuinOp: os << "IsQuinOp"; break;
    case kIsSextupleOp: os << "IsSextupleOp"; break;
    case kIsIT: os << "IsIT"; break;
    case kIsMoveOp: os << "IsMoveOp"; break;
    case kMemLoad: os << "MemLoad"; break;
    case kMemStore: os << "MemStore"; break;
    case kMemVolatile: os << "MemVolatile"; break;
    case kMemScaledx0: os << "MemScaledx0"; break;
    case kMemScaledx2: os << "MemScaledx2"; break;
    case kMemScaledx4: os << "MemScaledx4"; break;
    case kPCRelFixup: os << "PCRelFixup"; break;
    case kRegDef0: os << "RegDef0"; break;
    case kRegDef1: os << "RegDef1"; break;
    case kRegDef2: os << "RegDef2"; break;
    case kRegDefA: os << "RegDefA"; break;
    case kRegDefD: os << "RegDefD"; break;
    case kRegDefFPCSList0: os << "RegDefFPCSList0"; break;
    case kRegDefFPCSList2: os << "RegDefFPCSList2"; break;
    case kRegDefList0: os << "RegDefList0"; break;
    case kRegDefList1: os << "RegDefList1"; break;
    case kRegDefList2: os << "RegDefList2"; break;
    case kRegDefLR: os << "RegDefLR"; break;
    case kRegDefSP: os << "RegDefSP"; break;
    case kRegUse0: os << "RegUse0"; break;
    case kRegUse1: os << "RegUse1"; break;
    case kRegUse2: os << "RegUse2"; break;
    case kRegUse3: os << "RegUse3"; break;
    case kRegUse4: os << "RegUse4"; break;
    case kRegUseA: os << "RegUseA"; break;
    case kRegUseC: os << "RegUseC"; break;
    case kRegUseD: os << "RegUseD"; break;
    case kRegUseB: os << "RegUseB"; break;
    case kRegUseFPCSList0: os << "RegUseFPCSList0"; break;
    case kRegUseFPCSList2: os << "RegUseFPCSList2"; break;
    case kRegUseList0: os << "RegUseList0"; break;
    case kRegUseList1: os << "RegUseList1"; break;
    case kRegUseLR: os << "RegUseLR"; break;
    case kRegUsePC: os << "RegUsePC"; break;
    case kRegUseSP: os << "RegUseSP"; break;
    case kSetsCCodes: os << "SetsCCodes"; break;
    case kUsesCCodes: os << "UsesCCodes"; break;
    case kUseFpStack: os << "UseFpStack"; break;
    case kUseHi: os << "UseHi"; break;
    case kUseLo: os << "UseLo"; break;
    case kDefHi: os << "DefHi"; break;
    case kDefLo: os << "DefLo"; break;
    default: os << "OpFeatureFlags[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const BBType& rhs) {
  switch (rhs) {
    case kNullBlock: os << "NullBlock"; break;
    case kEntryBlock: os << "EntryBlock"; break;
    case kDalvikByteCode: os << "DalvikByteCode"; break;
    case kExitBlock: os << "ExitBlock"; break;
    case kExceptionHandling: os << "ExceptionHandling"; break;
    case kDead: os << "Dead"; break;
    default: os << "BBType[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const MIROptimizationFlagPositions& rhs) {
  switch (rhs) {
    case kMIRIgnoreNullCheck: os << "MIRIgnoreNullCheck"; break;
    case kMIRIgnoreRangeCheck: os << "MIRIgnoreRangeCheck"; break;
    case kMIRIgnoreCheckCast: os << "MIRIgnoreCheckCast"; break;
    case kMIRStoreNonNullValue: os << "MIRStoreNonNullValue"; break;
    case kMIRClassIsInitialized: os << "MIRClassIsInitialized"; break;
    case kMIRClassIsInDexCache: os << "MIRClassIsInDexCache"; break;
    case kMirIgnoreDivZeroCheck: os << "MirIgnoreDivZeroCheck"; break;
    case kMIRInlined: os << "MIRInlined"; break;
    case kMIRInlinedPred: os << "MIRInlinedPred"; break;
    case kMIRCallee: os << "MIRCallee"; break;
    case kMIRIgnoreSuspendCheck: os << "MIRIgnoreSuspendCheck"; break;
    case kMIRDup: os << "MIRDup"; break;
    case kMIRMark: os << "MIRMark"; break;
    case kMIRStoreNonTemporal: os << "MIRStoreNonTemporal"; break;
    case kMIRLastMIRFlag: os << "MIRLastMIRFlag"; break;
    default: os << "MIROptimizationFlagPositions[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const RegLocationType& rhs) {
  switch (rhs) {
    case kLocDalvikFrame: os << "LocDalvikFrame"; break;
    case kLocPhysReg: os << "LocPhysReg"; break;
    case kLocCompilerTemp: os << "LocCompilerTemp"; break;
    case kLocInvalid: os << "LocInvalid"; break;
    default: os << "RegLocationType[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const SpecialTargetRegister& rhs) {
  switch (rhs) {
    case kSelf: os << "Self"; break;
    case kSuspend: os << "Suspend"; break;
    case kLr: os << "Lr"; break;
    case kPc: os << "Pc"; break;
    case kSp: os << "Sp"; break;
    case kArg0: os << "Arg0"; break;
    case kArg1: os << "Arg1"; break;
    case kArg2: os << "Arg2"; break;
    case kArg3: os << "Arg3"; break;
    case kArg4: os << "Arg4"; break;
    case kArg5: os << "Arg5"; break;
    case kArg6: os << "Arg6"; break;
    case kArg7: os << "Arg7"; break;
    case kFArg0: os << "FArg0"; break;
    case kFArg1: os << "FArg1"; break;
    case kFArg2: os << "FArg2"; break;
    case kFArg3: os << "FArg3"; break;
    case kFArg4: os << "FArg4"; break;
    case kFArg5: os << "FArg5"; break;
    case kFArg6: os << "FArg6"; break;
    case kFArg7: os << "FArg7"; break;
    case kFArg8: os << "FArg8"; break;
    case kFArg9: os << "FArg9"; break;
    case kFArg10: os << "FArg10"; break;
    case kFArg11: os << "FArg11"; break;
    case kFArg12: os << "FArg12"; break;
    case kFArg13: os << "FArg13"; break;
    case kFArg14: os << "FArg14"; break;
    case kFArg15: os << "FArg15"; break;
    case kRet0: os << "Ret0"; break;
    case kRet1: os << "Ret1"; break;
    case kInvokeTgt: os << "InvokeTgt"; break;
    case kHiddenArg: os << "HiddenArg"; break;
    case kHiddenFpArg: os << "HiddenFpArg"; break;
    case kCount: os << "Count"; break;
    default: os << "SpecialTargetRegister[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const BlockListType& rhs) {
  switch (rhs) {
    case kNotUsed: os << "NotUsed"; break;
    case kCatch: os << "Catch"; break;
    case kPackedSwitch: os << "PackedSwitch"; break;
    case kSparseSwitch: os << "SparseSwitch"; break;
    default: os << "BlockListType[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const OpSize& rhs) {
  switch (rhs) {
    case kWord: os << "Word"; break;
    case k32: os << "32"; break;
    case k64: os << "64"; break;
    case kReference: os << "Reference"; break;
    case kSingle: os << "Single"; break;
    case kDouble: os << "Double"; break;
    case kUnsignedHalf: os << "UnsignedHalf"; break;
    case kSignedHalf: os << "SignedHalf"; break;
    case kUnsignedByte: os << "UnsignedByte"; break;
    case kSignedByte: os << "SignedByte"; break;
    default: os << "OpSize[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const AssemblerStatus& rhs) {
  switch (rhs) {
    case kSuccess: os << "Success"; break;
    case kRetryAll: os << "RetryAll"; break;
    default: os << "AssemblerStatus[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const DividePattern& rhs) {
  switch (rhs) {
    case DivideNone: os << "DivideNone"; break;
    case Divide3: os << "Divide3"; break;
    case Divide5: os << "Divide5"; break;
    case Divide7: os << "Divide7"; break;
    default: os << "DividePattern[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const ExtendedMIROpcode& rhs) {
  switch (rhs) {
    case kMirOpCopy: os << "MirOpCopy"; break;
    case kMirOpFusedCmplFloat: os << "MirOpFusedCmplFloat"; break;
    case kMirOpFusedCmpgFloat: os << "MirOpFusedCmpgFloat"; break;
    case kMirOpFusedCmplDouble: os << "MirOpFusedCmplDouble"; break;
    case kMirOpFusedCmpgDouble: os << "MirOpFusedCmpgDouble"; break;
    case kMirOpFusedCmpLong: os << "MirOpFusedCmpLong"; break;
    case kMirOpNop: os << "MirOpNop"; break;
    case kMirOpNullCheck: os << "MirOpNullCheck"; break;
    case kMirOpRangeCheck: os << "MirOpRangeCheck"; break;
    case kMirOpDivZeroCheck: os << "MirOpDivZeroCheck"; break;
    case kMirOpCheck: os << "MirOpCheck"; break;
    case kMirOpSelect: os << "MirOpSelect"; break;
    case kMirOpConstVector: os << "MirOpConstVector"; break;
    case kMirOpMoveVector: os << "MirOpMoveVector"; break;
    case kMirOpPackedMultiply: os << "MirOpPackedMultiply"; break;
    case kMirOpPackedAddition: os << "MirOpPackedAddition"; break;
    case kMirOpPackedSubtract: os << "MirOpPackedSubtract"; break;
    case kMirOpPackedShiftLeft: os << "MirOpPackedShiftLeft"; break;
    case kMirOpPackedSignedShiftRight: os << "MirOpPackedSignedShiftRight"; break;
    case kMirOpPackedUnsignedShiftRight: os << "MirOpPackedUnsignedShiftRight"; break;
    case kMirOpPackedAnd: os << "MirOpPackedAnd"; break;
    case kMirOpPackedOr: os << "MirOpPackedOr"; break;
    case kMirOpPackedXor: os << "MirOpPackedXor"; break;
    case kMirOpPackedAddReduce: os << "MirOpPackedAddReduce"; break;
    case kMirOpPackedReduce: os << "MirOpPackedReduce"; break;
    case kMirOpPackedSet: os << "MirOpPackedSet"; break;
    case kMirOpReserveVectorRegisters: os << "MirOpReserveVectorRegisters"; break;
    case kMirOpReturnVectorRegisters: os << "MirOpReturnVectorRegisters"; break;
    case kMirOpMemBarrier: os << "MirOpMemBarrier"; break;
    case kMirOpPackedArrayGet: os << "MirOpPackedArrayGet"; break;
    case kMirOpPackedArrayPut: os << "MirOpPackedArrayPut"; break;
    case kMirOpMaddInt: os << "MirOpMaddInt"; break;
    case kMirOpMsubInt: os << "MirOpMsubInt"; break;
    case kMirOpMaddLong: os << "MirOpMaddLong"; break;
    case kMirOpMsubLong: os << "MirOpMsubLong"; break;
    case kMirOpLast: os << "MirOpLast"; break;
    default: os << "ExtendedMIROpcode[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const X86ConditionCode& rhs) {
  switch (rhs) {
    case kX86CondO: os << "X86CondO"; break;
    case kX86CondNo: os << "X86CondNo"; break;
    case kX86CondB: os << "X86CondB"; break;
    case kX86CondNb: os << "X86CondNb"; break;
    case kX86CondZ: os << "X86CondZ"; break;
    case kX86CondNz: os << "X86CondNz"; break;
    case kX86CondBe: os << "X86CondBe"; break;
    case kX86CondNbe: os << "X86CondNbe"; break;
    case kX86CondS: os << "X86CondS"; break;
    case kX86CondNs: os << "X86CondNs"; break;
    case kX86CondP: os << "X86CondP"; break;
    case kX86CondNp: os << "X86CondNp"; break;
    case kX86CondL: os << "X86CondL"; break;
    case kX86CondNl: os << "X86CondNl"; break;
    case kX86CondLe: os << "X86CondLe"; break;
    case kX86CondNle: os << "X86CondNle"; break;
    default: os << "X86ConditionCode[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const FixupKind& rhs) {
  switch (rhs) {
    case kFixupNone: os << "FixupNone"; break;
    case kFixupLabel: os << "FixupLabel"; break;
    case kFixupLoad: os << "FixupLoad"; break;
    case kFixupVLoad: os << "FixupVLoad"; break;
    case kFixupCBxZ: os << "FixupCBxZ"; break;
    case kFixupTBxZ: os << "FixupTBxZ"; break;
    case kFixupCondBranch: os << "FixupCondBranch"; break;
    case kFixupT1Branch: os << "FixupT1Branch"; break;
    case kFixupT2Branch: os << "FixupT2Branch"; break;
    case kFixupBlx1: os << "FixupBlx1"; break;
    case kFixupBl1: os << "FixupBl1"; break;
    case kFixupAdr: os << "FixupAdr"; break;
    case kFixupMovImmLST: os << "FixupMovImmLST"; break;
    case kFixupMovImmHST: os << "FixupMovImmHST"; break;
    case kFixupAlign4: os << "FixupAlign4"; break;
    case kFixupA53Erratum835769: os << "FixupA53Erratum835769"; break;
    case kFixupSwitchTable: os << "FixupSwitchTable"; break;
    default: os << "FixupKind[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const SelectInstructionKind& rhs) {
  switch (rhs) {
    case kSelectNone: os << "SelectNone"; break;
    case kSelectConst: os << "SelectConst"; break;
    case kSelectMove: os << "SelectMove"; break;
    case kSelectGoto: os << "SelectGoto"; break;
    default: os << "SelectInstructionKind[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const MoveType& rhs) {
  switch (rhs) {
    case kMov8GP: os << "Mov8GP"; break;
    case kMov16GP: os << "Mov16GP"; break;
    case kMov32GP: os << "Mov32GP"; break;
    case kMov64GP: os << "Mov64GP"; break;
    case kMov32FP: os << "Mov32FP"; break;
    case kMov64FP: os << "Mov64FP"; break;
    case kMovLo64FP: os << "MovLo64FP"; break;
    case kMovHi64FP: os << "MovHi64FP"; break;
    case kMovU128FP: os << "MovU128FP"; break;
    case kMovA128FP: os << "MovA128FP"; break;
    case kMovLo128FP: os << "MovLo128FP"; break;
    case kMovHi128FP: os << "MovHi128FP"; break;
    default: os << "MoveType[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const OpKind& rhs) {
  switch (rhs) {
    case kOpMov: os << "OpMov"; break;
    case kOpCmov: os << "OpCmov"; break;
    case kOpMvn: os << "OpMvn"; break;
    case kOpCmp: os << "OpCmp"; break;
    case kOpLsl: os << "OpLsl"; break;
    case kOpLsr: os << "OpLsr"; break;
    case kOpAsr: os << "OpAsr"; break;
    case kOpRor: os << "OpRor"; break;
    case kOpNot: os << "OpNot"; break;
    case kOpAnd: os << "OpAnd"; break;
    case kOpOr: os << "OpOr"; break;
    case kOpXor: os << "OpXor"; break;
    case kOpNeg: os << "OpNeg"; break;
    case kOpAdd: os << "OpAdd"; break;
    case kOpAdc: os << "OpAdc"; break;
    case kOpSub: os << "OpSub"; break;
    case kOpSbc: os << "OpSbc"; break;
    case kOpRsub: os << "OpRsub"; break;
    case kOpMul: os << "OpMul"; break;
    case kOpDiv: os << "OpDiv"; break;
    case kOpRem: os << "OpRem"; break;
    case kOpBic: os << "OpBic"; break;
    case kOpCmn: os << "OpCmn"; break;
    case kOpTst: os << "OpTst"; break;
    case kOpRev: os << "OpRev"; break;
    case kOpRevsh: os << "OpRevsh"; break;
    case kOpBkpt: os << "OpBkpt"; break;
    case kOpBlx: os << "OpBlx"; break;
    case kOpPush: os << "OpPush"; break;
    case kOpPop: os << "OpPop"; break;
    case kOp2Char: os << "Op2Char"; break;
    case kOp2Short: os << "Op2Short"; break;
    case kOp2Byte: os << "Op2Byte"; break;
    case kOpCondBr: os << "OpCondBr"; break;
    case kOpUncondBr: os << "OpUncondBr"; break;
    case kOpBx: os << "OpBx"; break;
    case kOpInvalid: os << "OpInvalid"; break;
    default: os << "OpKind[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const LIRPseudoOpcode& rhs) {
  switch (rhs) {
    case kPseudoPrologueBegin: os << "PseudoPrologueBegin"; break;
    case kPseudoPrologueEnd: os << "PseudoPrologueEnd"; break;
    case kPseudoEpilogueBegin: os << "PseudoEpilogueBegin"; break;
    case kPseudoEpilogueEnd: os << "PseudoEpilogueEnd"; break;
    case kPseudoExportedPC: os << "PseudoExportedPC"; break;
    case kPseudoSafepointPC: os << "PseudoSafepointPC"; break;
    case kPseudoIntrinsicRetry: os << "PseudoIntrinsicRetry"; break;
    case kPseudoSuspendTarget: os << "PseudoSuspendTarget"; break;
    case kPseudoThrowTarget: os << "PseudoThrowTarget"; break;
    case kPseudoCaseLabel: os << "PseudoCaseLabel"; break;
    case kPseudoBarrier: os << "PseudoBarrier"; break;
    case kPseudoEntryBlock: os << "PseudoEntryBlock"; break;
    case kPseudoExitBlock: os << "PseudoExitBlock"; break;
    case kPseudoTargetLabel: os << "PseudoTargetLabel"; break;
    case kPseudoDalvikByteCodeBoundary: os << "PseudoDalvikByteCodeBoundary"; break;
    case kPseudoPseudoAlign4: os << "PseudoPseudoAlign4"; break;
    case kPseudoEHBlockLabel: os << "PseudoEHBlockLabel"; break;
    case kPseudoNormalBlockLabel: os << "PseudoNormalBlockLabel"; break;
    default: os << "LIRPseudoOpcode[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const WideKind& rhs) {
  switch (rhs) {
    case kNotWide: os << "NotWide"; break;
    case kWide: os << "Wide"; break;
    case kRef: os << "Ref"; break;
    default: os << "WideKind[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const ConditionCode& rhs) {
  switch (rhs) {
    case kCondEq: os << "CondEq"; break;
    case kCondNe: os << "CondNe"; break;
    case kCondCs: os << "CondCs"; break;
    case kCondCc: os << "CondCc"; break;
    case kCondUlt: os << "CondUlt"; break;
    case kCondUge: os << "CondUge"; break;
    case kCondMi: os << "CondMi"; break;
    case kCondPl: os << "CondPl"; break;
    case kCondVs: os << "CondVs"; break;
    case kCondVc: os << "CondVc"; break;
    case kCondHi: os << "CondHi"; break;
    case kCondLs: os << "CondLs"; break;
    case kCondGe: os << "CondGe"; break;
    case kCondLt: os << "CondLt"; break;
    case kCondGt: os << "CondGt"; break;
    case kCondLe: os << "CondLe"; break;
    case kCondAl: os << "CondAl"; break;
    case kCondNv: os << "CondNv"; break;
    default: os << "ConditionCode[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const MemBarrierKind& rhs) {
  switch (rhs) {
    case kAnyStore: os << "AnyStore"; break;
    case kLoadAny: os << "LoadAny"; break;
    case kStoreStore: os << "StoreStore"; break;
    case kAnyAny: os << "AnyAny"; break;
    case kNTStoreStore: os << "NTStoreStore"; break;
    default: os << "MemBarrierKind[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const BitsUsed& rhs) {
  switch (rhs) {
    case kSize32Bits: os << "Size32Bits"; break;
    case kSize64Bits: os << "Size64Bits"; break;
    case kSize128Bits: os << "Size128Bits"; break;
    case kSize256Bits: os << "Size256Bits"; break;
    case kSize512Bits: os << "Size512Bits"; break;
    case kSize1024Bits: os << "Size1024Bits"; break;
    default: os << "BitsUsed[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const RegisterClass& rhs) {
  switch (rhs) {
    case kInvalidRegClass: os << "InvalidRegClass"; break;
    case kCoreReg: os << "CoreReg"; break;
    case kFPReg: os << "FPReg"; break;
    case kRefReg: os << "RefReg"; break;
    case kAnyReg: os << "AnyReg"; break;
    default: os << "RegisterClass[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const ArmConditionCode& rhs) {
  switch (rhs) {
    case kArmCondEq: os << "ArmCondEq"; break;
    case kArmCondNe: os << "ArmCondNe"; break;
    case kArmCondCs: os << "ArmCondCs"; break;
    case kArmCondCc: os << "ArmCondCc"; break;
    case kArmCondMi: os << "ArmCondMi"; break;
    case kArmCondPl: os << "ArmCondPl"; break;
    case kArmCondVs: os << "ArmCondVs"; break;
    case kArmCondVc: os << "ArmCondVc"; break;
    case kArmCondHi: os << "ArmCondHi"; break;
    case kArmCondLs: os << "ArmCondLs"; break;
    case kArmCondGe: os << "ArmCondGe"; break;
    case kArmCondLt: os << "ArmCondLt"; break;
    case kArmCondGt: os << "ArmCondGt"; break;
    case kArmCondLe: os << "ArmCondLe"; break;
    case kArmCondAl: os << "ArmCondAl"; break;
    case kArmCondNv: os << "ArmCondNv"; break;
    default: os << "ArmConditionCode[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const VolatileKind& rhs) {
  switch (rhs) {
    case kNotVolatile: os << "NotVolatile"; break;
    case kVolatile: os << "Volatile"; break;
    default: os << "VolatileKind[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

