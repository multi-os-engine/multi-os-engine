package apple.naturallanguage;

import apple.NSObject;
import apple.foundation.NSArray;
import apple.foundation.NSDictionary;
import apple.foundation.NSError;
import apple.foundation.NSMethodSignature;
import apple.foundation.NSSet;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.moe.natj.c.ann.FunctionPtr;
import org.moe.natj.general.NatJ;
import org.moe.natj.general.Pointer;
import org.moe.natj.general.ann.Generated;
import org.moe.natj.general.ann.Library;
import org.moe.natj.general.ann.Mapped;
import org.moe.natj.general.ann.NInt;
import org.moe.natj.general.ann.NUInt;
import org.moe.natj.general.ann.Owned;
import org.moe.natj.general.ann.ReferenceInfo;
import org.moe.natj.general.ann.Runtime;
import org.moe.natj.general.ptr.Ptr;
import org.moe.natj.general.ptr.VoidPtr;
import org.moe.natj.objc.Class;
import org.moe.natj.objc.ObjCRuntime;
import org.moe.natj.objc.SEL;
import org.moe.natj.objc.ann.ObjCBlock;
import org.moe.natj.objc.ann.ObjCClassBinding;
import org.moe.natj.objc.ann.Selector;
import org.moe.natj.objc.map.ObjCObjectMapper;

/**
 * NLContextualEmbedding is a class representing a model that computes sequences of embedding vectors for
 * natural-language utterances. Predefined contextual embeddings are provided for certain languages/scripts.
 */
@Generated
@Library("NaturalLanguage")
@Runtime(ObjCRuntime.class)
@ObjCClassBinding
public class NLContextualEmbedding extends NSObject {
    static {
        NatJ.register();
    }

    @Generated
    protected NLContextualEmbedding(Pointer peer) {
        super(peer);
    }

    @Generated
    @Selector("accessInstanceVariablesDirectly")
    public static native boolean accessInstanceVariablesDirectly();

    @Generated
    @Owned
    @Selector("alloc")
    public static native NLContextualEmbedding alloc();

    @Generated
    @Owned
    @Selector("allocWithZone:")
    public static native NLContextualEmbedding allocWithZone(VoidPtr zone);

    @Generated
    @Selector("automaticallyNotifiesObserversForKey:")
    public static native boolean automaticallyNotifiesObserversForKey(@NotNull String key);

    @Generated
    @Selector("cancelPreviousPerformRequestsWithTarget:")
    public static native void cancelPreviousPerformRequestsWithTarget(
            @Mapped(ObjCObjectMapper.class) @NotNull Object aTarget);

    @Generated
    @Selector("cancelPreviousPerformRequestsWithTarget:selector:object:")
    public static native void cancelPreviousPerformRequestsWithTargetSelectorObject(
            @Mapped(ObjCObjectMapper.class) @NotNull Object aTarget, @NotNull SEL aSelector,
            @Mapped(ObjCObjectMapper.class) @Nullable Object anArgument);

    @Generated
    @Selector("classFallbacksForKeyedArchiver")
    @NotNull
    public static native NSArray<String> classFallbacksForKeyedArchiver();

    @Generated
    @Selector("classForKeyedUnarchiver")
    @NotNull
    public static native Class classForKeyedUnarchiver();

    /**
     * Convenience APIs for finding the most recent embedding suitable for handling the given language or script.
     */
    @Generated
    @Selector("contextualEmbeddingWithLanguage:")
    @Nullable
    public static native NLContextualEmbedding contextualEmbeddingWithLanguage(@NotNull String language);

    /**
     * Each embedding model has a string identifier that uniquely identifies it. When an embedding is used for training,
     * keep track of the identifier. It should be used to locate the same embedding at inference time.
     */
    @Generated
    @Selector("contextualEmbeddingWithModelIdentifier:")
    public static native NLContextualEmbedding contextualEmbeddingWithModelIdentifier(@NotNull String modelIdentifier);

    @Generated
    @Selector("contextualEmbeddingWithScript:")
    @Nullable
    public static native NLContextualEmbedding contextualEmbeddingWithScript(@NotNull String script);

    /**
     * Search the catalog of available embeddings by languages, scripts, or revision numbers.
     */
    @Generated
    @Selector("contextualEmbeddingsForValues:")
    @NotNull
    public static native NSArray<? extends NLContextualEmbedding> contextualEmbeddingsForValues(
            @NotNull NSDictionary<String, ?> valuesDictionary);

    @Generated
    @Selector("debugDescription")
    public static native String debugDescription_static();

    @Generated
    @Selector("description")
    public static native String description_static();

    /**
     * The dimensionality of the embedding vectors generated by the model.
     */
    @Generated
    @Selector("dimension")
    @NUInt
    public native long dimension();

    /**
     * This is the method for applying an embedding to a string and obtaining the resulting embedding vectors,
     * encapsulated in an NLContextualEmbeddingResult object. If the language of the string is known, it may be
     * specified here, otherwise it will be inferred from the string.
     */
    @Generated
    @Selector("embeddingResultForString:language:error:")
    @Nullable
    public native NLContextualEmbeddingResult embeddingResultForStringLanguageError(@NotNull String string,
            @Nullable String language, @ReferenceInfo(type = NSError.class) @Nullable Ptr<NSError> error);

    @Generated
    @Selector("hasAvailableAssets")
    public native boolean hasAvailableAssets();

    @Generated
    @Selector("hash")
    @NUInt
    public static native long hash_static();

    @Generated
    @Selector("init")
    public native NLContextualEmbedding init();

    @Generated
    @Selector("instanceMethodForSelector:")
    @FunctionPtr(name = "call_instanceMethodForSelector_ret")
    public static native NSObject.Function_instanceMethodForSelector_ret instanceMethodForSelector(SEL aSelector);

    @Generated
    @Selector("instanceMethodSignatureForSelector:")
    public static native NSMethodSignature instanceMethodSignatureForSelector(SEL aSelector);

    @Generated
    @Selector("instancesRespondToSelector:")
    public static native boolean instancesRespondToSelector(SEL aSelector);

    @Generated
    @Selector("isSubclassOfClass:")
    public static native boolean isSubclassOfClass(Class aClass);

    @Generated
    @Selector("keyPathsForValuesAffectingValueForKey:")
    @NotNull
    public static native NSSet<String> keyPathsForValuesAffectingValueForKey(@NotNull String key);

    @Generated
    @Selector("languages")
    @NotNull
    public native NSArray<String> languages();

    /**
     * When an NLContextualEmbedding is created, the model is not loaded by default until it is needed. The load and
     * unload methods can be used to control when the model is loaded. The return value of load indicates whether it
     * succeeded. The load method will fail if the necessary assets for the specified model are not present on device,
     * in which case hasAvailableAssets and requestEmbeddingAssetsWithCompletionHandler: can be used to manage the
     * loading of the assets.
     */
    @Generated
    @Selector("loadWithError:")
    public native boolean loadWithError(@ReferenceInfo(type = NSError.class) @Nullable Ptr<NSError> error);

    /**
     * The maximum number of embedding vectors in sequence which the model will generate.
     */
    @Generated
    @Selector("maximumSequenceLength")
    @NUInt
    public native long maximumSequenceLength();

    /**
     * Metadata associated with an embedding.
     */
    @Generated
    @Selector("modelIdentifier")
    @NotNull
    public native String modelIdentifier();

    @Generated
    @Owned
    @Selector("new")
    public static native NLContextualEmbedding new_objc();

    @Generated
    @Selector("requestEmbeddingAssetsWithCompletionHandler:")
    public native void requestEmbeddingAssetsWithCompletionHandler(
            @ObjCBlock(name = "call_requestEmbeddingAssetsWithCompletionHandler") @NotNull Block_requestEmbeddingAssetsWithCompletionHandler completionHandler);

    @Runtime(ObjCRuntime.class)
    @Generated
    public interface Block_requestEmbeddingAssetsWithCompletionHandler {
        @Generated
        void call_requestEmbeddingAssetsWithCompletionHandler(@NInt long result, @Nullable NSError error);
    }

    @Generated
    @Selector("resolveClassMethod:")
    public static native boolean resolveClassMethod(SEL sel);

    @Generated
    @Selector("resolveInstanceMethod:")
    public static native boolean resolveInstanceMethod(SEL sel);

    @Generated
    @Selector("revision")
    @NUInt
    public native long revision();

    @Generated
    @Selector("scripts")
    @NotNull
    public native NSArray<String> scripts();

    @Generated
    @Selector("setVersion:")
    public static native void setVersion_static(@NInt long aVersion);

    @Generated
    @Selector("superclass")
    public static native Class superclass_static();

    @Generated
    @Selector("unload")
    public native void unload();

    @Generated
    @Deprecated
    @Selector("useStoredAccessor")
    public static native boolean useStoredAccessor();

    @Generated
    @Selector("version")
    @NInt
    public static native long version_static();
}