/*
Copyright 2014-2016 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


apply plugin: 'java'

def external_path = rootProject.file("../../external").absolutePath
def external_java_sources = [
        "${external_path}/javasqlite/src/main/java",
]

sourceSets {
    main {
        java {
            srcDirs += external_java_sources
        }
        resources {
            srcDirs = java.srcDirs
        }
    }
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

// Don't run tests with the built-in junit
test { exclude '**' }

/******************************************************************************
 * Core Jar Generation
 ******************************************************************************/

jar {
    archiveBaseName = 'moe-core'

    from { [rootProject.file('LICENSE'), rootProject.file('NOTICE')] }
    getDestinationDirectory().set(file('build/libs/core'))
    from(file('../eula/LICENSE.TXT')) { into 'META-INF' }
    includeEmptyDirs false
}

task sourceJar(type: Jar) {
    archiveBaseName = 'moe-core'
    archiveClassifier = 'sources'

    from rootProject.file('LICENSE'), rootProject.file('NOTICE')
    from sourceSets.main.allJava
    getDestinationDirectory().set(file('build/libs/core'))
    from(file('../eula/LICENSE.TXT')) { into 'META-INF' }
    includeEmptyDirs false
}

/******************************************************************************
 * Core Javadoc Jar Generation
 ******************************************************************************/

javadoc {
    title = "moe.ios.core API"
    destinationDir = file('build/docs/coreJavadoc')
    include "**/*.java"
    options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveBaseName = 'moe-core'
    archiveClassifier = 'javadoc'

    from javadoc.destinationDir
    from { [rootProject.file('LICENSE'), rootProject.file('NOTICE')] }
    getDestinationDirectory().set(file('build/libs/core'))
    from(file('../eula/LICENSE.TXT')) { into 'META-INF' }
}

artifacts {
    archives javadocJar
    archives sourceJar
}
