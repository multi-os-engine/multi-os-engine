/*
Copyright 2014-2016 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

apply plugin: 'maven-publish'

def dex2oatProject = project(':moe.ios.core.native:android.art.dex2oat')
project.ext.set("dex2oatProject", dex2oatProject)
evaluationDependsOn(dex2oatProject.path)

def sdkProject = project(':moe.ios.core.native:moe.sdk')
project.ext.set("sdkProject", sdkProject)
evaluationDependsOn(sdkProject.path)

def javaProject = project(':moe.ios.core')
evaluationDependsOn(javaProject.path)

def createRuntimeZipTask(name, confs, framework, dsym, cls) {
    project.task([type: Zip, dependsOn: sdkProject.tasks.buildNative], "${name}RuntimeZip") {
        baseName 'moe'
        appendix 'ios'
        classifier cls
        extension 'zip'

        destinationDir file("build/${name}/libs")

        from (file('../eula/LICENSE.TXT'))
        for(conf in confs) {
            for(plat in ['iphoneos', 'iphonesimulator']) {
                from(sdkProject.file("build/xcode/${conf}-${plat}")) {
                    if (framework) {
                        include 'MOE.framework/**/*'
                    }

                    if (dsym) {
                        include 'MOE.framework.dSYM/**/*'
                    }

                    into plat
                }
            }
        }
    }
}

def createToolsZipTask(name, config, dsym, cls) {
    project.task([type: Zip, dependsOn: [dex2oatProject.tasks.buildNative]], "${name}ToolsZip") {
        baseName 'moe'
        appendix 'ios'
        classifier cls
        extension 'zip'

        destinationDir file("build/${name}/libs")

        from (file('../eula/LICENSE.TXT'))
        from(dex2oatProject.file("build/xcode/$config")) {
            if (dsym) {
                include 'dex2oat.dSYM/**/*'
            } else {
                include 'dex2oat'
            }

            into 'platform-tools'
        }
        if (!dsym) {
            from(file("prebuilts")) {
                include 'dx'
                include 'lib/dx.jar'

                into 'platform-tools'
            }

            from(file('.')) {
                include 'proguard.jar'
                include 'proguard.cfg'
                include 'proguard-full.cfg'
                include 'retrolambda-2.0.2.jar'
                include 'java8support.jar'
                into 'script'
            }

            from new File("${android_path}/frameworks/base/preloaded-classes")
        }
    }
}

createRuntimeZipTask('public', ['Release'], true, false, 'runtime')
createRuntimeZipTask('dsym', ['Release'], false, true, 'runtime-dsym')
createRuntimeZipTask('debug', ['Debug'], true, true, 'runtime-debug')

createToolsZipTask('public', 'Release', false, 'tools')
createToolsZipTask('dsym', 'Release', true, 'tools-dsym')
createToolsZipTask('debug', 'Debug', false, 'tools-debug')

def moe_sdk_version = version_moe
def moe_sdk_qualifier = null

if (project.hasProperty('moe.publish.qualifier')) {
    def qual = project.property('moe.publish.qualifier')
    if ("final".equals(qual) || "alpha".equals(qual)) {
        def num = System.getenv("BUILD_NUMBER")
        if (num == null) {
            throw new GradleException("Builds with qualifiers MUST have a build number! Env BUILD_NUMBER is not set")
        }
        moe_sdk_qualifier = qual
        moe_sdk_version = "${version_moe}.${moe_sdk_qualifier}-${num}"
    } else {
        throw new GradleException("Unknown qualifier: '$qual'")
    }
} else {
    moe_sdk_version = "${version_moe}.dev-SNAPSHOT"
}

def getRequiredEnv(name) {
    String env = System.getenv(name)
    if (env == null) {
        throw new GradleException("Env $name is not set")
    }
    return env
}

publishing {
    repositories {
        if (moe_sdk_qualifier == null) {
            mavenLocal()

        } else {
            String mvnAddr = getRequiredEnv('PUBLISH_TARGET_REPO_ADDR')
            String mvnUser = getRequiredEnv('PUBLISH_TARGET_REPO_USER')
            String mvnPass = getRequiredEnv('PUBLISH_TARGET_REPO_PASS')
            maven {
                url mvnAddr
                if (mvnUser.length() > 0) {
                    credentials {
                        username = mvnUser
                        password = mvnPass
                    }
                }
            }
        }
    }
    publications {
        mavenPublic(MavenPublication) {
            groupId 'org.moe'
            artifactId 'moe-ios'
            version moe_sdk_version

            artifact(javaProject.coreJar)
            artifact(javaProject.iosJar)
            artifact(javaProject.junitJar)

            artifact(javaProject.coreJavadocJar)
            artifact(javaProject.iosJavadocJar)
            artifact(javaProject.junitJavadocJar)

            artifact(publicRuntimeZip)

            artifact(publicToolsZip)
        }
        mavenDocs(MavenPublication) {
            groupId 'org.moe'
            artifactId 'moe-ios-docs'
            version moe_sdk_version

            artifact(javaProject.natjSphinxJar)
        }
        mavenDebug(MavenPublication) {
            groupId 'org.moe'
            artifactId 'moe-ios-debug'
            version moe_sdk_version

            artifact(dsymRuntimeZip)
            artifact(debugRuntimeZip)

            artifact(javaProject.coreSourcesJar)
            artifact(javaProject.iosSourcesJar)
            artifact(javaProject.junitSourcesJar)

            artifact(dsymToolsZip)
            artifact(debugToolsZip)
        }
    }
}
