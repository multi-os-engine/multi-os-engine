/*
Copyright 2014-2016 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

def dex2oatProject = project(':moe.ios.core.native:android.art.dex2oat')
evaluationDependsOn(dex2oatProject.path)

def sdkProject = project(':moe.ios.core.native:moe.sdk')
evaluationDependsOn(sdkProject.path)

def javaProject = project(':moe.ios.core')
evaluationDependsOn(javaProject.path)

String moeHome = "${buildDir}/moe_home"


configurations {
    ios_launchers
    osxnatives
}

dependencies {
    repositories {
        jcenter()
        maven {
        	url System.getenv("MOE_MAVEN_ADDR")
        }
    }
    
    ios_launchers group: 'org.moe', name: 'moeIosDeviceLauncher',    version:'1.1.+', transitive: false
    ios_launchers group: 'org.moe', name: 'moeIosSimulatorLauncher', version:'1.3.+', transitive: false
    
    osxnatives('org.moe:natj-mac:1.0.+') {
        artifact {
            name = 'natj-mac'
            extension = 'dylib'
            type = 'dylib'
            classifier = 'Release'
        }
    }

    osxnatives('org.moe:moeBindingLibimobiledevice:1.1.+') {
        transitive = false
        artifact {
            name = 'moeBindingLibimobiledevice'
            extension = 'dylib'
            type = 'dylib'
            classifier = 'libimobiledevice_macosx_x86_64'
        }
    }
}

/***************************
** Retrolambda task
****************************/

task retroIosJar {
		
	inputs.file javaProject.iosJar
	inputs.file javaProject.coreJar
	inputs.file file("../moe.ios.sdk/retrolambda-2.0.2.jar")

	File ios_jar = inputs.files[0]
	File core_jar = inputs.files[1]
	File retro_exec_jar = inputs.files[2]

	File tmp_retro = new File(buildDir, 'retro')
	File tmp_retro_repack = new File(tmp_retro, 'repack')
	File out_retro_jar = new File(tmp_retro, 'moe-ios-retro.jar')

	outputs.file out_retro_jar

	doFirst {

		tmp_retro.delete()
		tmp_retro_repack.mkdirs()

		def log = new ByteArrayOutputStream();

		try {
			exec {
		 	    executable "jar"
		    	args "-xvf", ios_jar
				workingDir tmp_retro_repack

				setErrorOutput(log)
	            setStandardOutput(log)
			}

			exec {
		 	    executable "java"

		    	args "-Dretrolambda.inputDir=" + tmp_retro_repack
		    	args "-Dretrolambda.classpath=" + core_jar
		    	args "-Dretrolambda.defaultMethods=true"
		    	args "-jar", retro_exec_jar

				setErrorOutput(log)
	            setStandardOutput(log)
			}

			exec {
		 	    executable "jar"

		 	    args "-cvf",  out_retro_jar,  "."
		 	    workingDir tmp_retro_repack

		 	    setErrorOutput(log)
	            setStandardOutput(log)
			}
			
		} catch(Exception ex) {
        	throw new GradleScriptException("Something failed with retro tools processing", ex);
    	}
    }
}

/***************************
** DEX tasks
****************************/

def createDexTask(name, input, out_dex_name) {
    project.task([type: Exec], "dex${name}Jar") {
		File tmp_dex = new File(buildDir, 'dex')
		File out_dex = new File(tmp_dex, out_dex_name)
    	
    	inputs.file input
    	outputs.file out_dex

		File input_jar = inputs.files[0]

    	executable "../moe.ios.sdk/prebuilts/dx"
    	args "--dex", "--output", out_dex
		args "--core-library", input_jar
		
		doFirst { 
			tmp_dex.delete()
			tmp_dex.mkdirs()
		}
    }
}

createDexTask("RetroIos", retroIosJar, "moe-ios-retro.jar")
createDexTask("Core", javaProject.coreJar, "moe-core.dex")

/***************************
** MOE HOME folder
****************************/

task prepareMoeHome(type: Copy, dependsOn: [sdkProject.buildNative, dex2oatProject.buildNative]) {
	into moeHome

	String config = 'Release'

	into ('tools') {
		
		from ( configurations.ios_launchers ) {
			rename 'moeIosSimulatorLauncher-(.+).jar', 'ios-simulator.jar'
			rename 'moeIosDeviceLauncher-(.+).jar', 'ios-device.jar' 
		}

		into('macosx/x86_64') {
			from ( configurations.osxnatives ) {
				rename 'natj-mac-(.+).dylib', 'libnatj.dylib'
				rename 'moeBindingLibimobiledevice(.+).dylib', 'libimobiledevice.dylib'
			}
		} 

		from ( dex2oatProject.buildNative )
		
		from ('../../../../frameworks/base/preloaded-classes')
		from ('../moe.ios.sdk/proguard.jar')
		from ('../moe.ios.sdk/proguard.cfg')
		from ('../moe.ios.sdk/proguard-full.cfg')
		from ('../moe.ios.sdk/prebuilts/dx')
		from ('../moe.ios.sdk/prebuilts/lib/dx.jar')
		from ('../moe.ios.sdk/retrolambda-2.0.2.jar') { rename 'retrolambda-(.+).jar', 'retrolambda.jar' }
		from ('../moe.ios.sdk/java8support.jar')
	}

	into ('sdk') {
		from (sdkProject.buildNative.outputs.files[0]) { into 'iphonesimulator/MOE.framework'}
		from (sdkProject.buildNative.outputs.files[1]) { into 'iphoneos/MOE.framework'}

		from (javaProject.coreJar) { rename 'moe-ios-core.jar', 'moe-core.jar' }
		from (javaProject.iosJar) { rename 'moe-ios-ios.jar', 'moe-ios.jar' }
		from (javaProject.junitJar) { rename 'moe-ios-junit.jar', 'moe-junit.jar' }
		from (dexRetroIosJar)
		from (dexCoreJar)
	}
}
