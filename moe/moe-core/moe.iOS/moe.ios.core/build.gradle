/*
Copyright 2014-2016 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ------------------------------ Init ------------------------------ //

buildscript {
    repositories {
        mavenCentral()
        maven { url { 'http://dl.bintray.com/youribonnaffe/maven' } }
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-format-plugin:1.1'
    }
}

apply plugin: 'java'
apply plugin: 'format'
apply plugin: 'checkstyle'

def JvmVersionMeets(version) {
	def currentJvm = org.gradle.internal.jvm.Jvm.current()
	return version <= Integer.parseInt(currentJvm.javaVersion.majorVersion)
}


// ------------------------------ Conscrypt Generation ------------------------------ //

task buildConscryptGenerator << {
	ByteArrayOutputStream ostream = new ByteArrayOutputStream();
    try {
        exec {
		 	executable = "xcodebuild"

		    args "-project", file("../moe.ios.core.native/android.external.conscrypt/android.external.conscrypt.xcodeproj").absolutePath
		    args "-target", "generate"
		    args "-configuration", "Release"

		    setErrorOutput(ostream)
            setStandardOutput(ostream)
	    }
    } catch(Exception ex) {
        throw new GradleScriptException("xcodebuild failed with: ${ostream}", ex);
    }
}

task generateConscryptFiles << {
	def log = new ByteArrayOutputStream();
	exec {
		commandLine "${inputs.files[0].absolutePath}"

		setErrorOutput(log)
		setStandardOutput(log)
	}
	mkdir(outputs.files[0].parentFile)
	PrintStream ps = new PrintStream(outputs.files[0])
	try {
		ps.println(log);
	} finally {
		ps.close();
	}
}

tasks.generateConscryptFiles.inputs.files file("../moe.ios.core.native/android.external.conscrypt/build/xcode/Release/generate")
tasks.generateConscryptFiles.outputs.files file('build/conscryptgen/NativeConstants.java')
tasks.generateConscryptFiles.dependsOn(tasks.buildConscryptGenerator)


// ------------------------------ SPrep Generation ------------------------------ //

task buildSPrepGenerator << {
    ByteArrayOutputStream ostream = new ByteArrayOutputStream();
    try {
        exec {
            executable = "xcodebuild"

            args "-project", file("../moe.ios.core.native/android.external.icu/android.external.icu.xcodeproj").absolutePath
            args "-target", "gensprep"
            args "-configuration", "Release"

            setErrorOutput(ostream)
            setStandardOutput(ostream)
        }
    } catch(Exception ex) {
        throw new GradleScriptException("xcodebuild failed with: ${ostream}", ex);
    }
}

def sprepExecInput = file("../moe.ios.core.native/android.external.icu/build/xcode/Release/gensprep")
def sprepInput = file("${android_path}/external/icu/icu4c/source/data/sprep").listFiles().findAll{ it.name.endsWith('.txt') }
def icuBaseOutput = file("build/icugen")
def icuOutput = new File(icuBaseOutput, "android/icu/impl/data/icudt56b")

task generateSPrepFiles << {
	mkdir(icuOutput)

    for (f in sprepInput) {
        def log = new ByteArrayOutputStream();
        try {
            exec {
                commandLine sprepExecInput

                args '-i', "${android_path}/external/icu/icu4c/source/stubdata"
                args '-d', icuOutput
                args '-u', '3.2.0'
                args '-m', "${android_path}/external/icu/icu4c/source/data/unidata"
                args '-b', f.name.split('\\.')[0..-2].join('.')
                args '-s', f.parent
                args f.name

                setErrorOutput(log)
                setStandardOutput(log)
            }
        } catch (Exception ex) {
            throw new GradleException("Could not generate spp file from ${f.absolutePath}: " + log.toString(), ex)
        }
    }
}

tasks.generateSPrepFiles.inputs.files sprepExecInput
tasks.generateSPrepFiles.inputs.files sprepInput
tasks.generateSPrepFiles.outputs.files sprepInput.collect {new File(file(icuOutput), it.name.split('\\.')[0..-2].join('.') + ".spp")}
tasks.generateSPrepFiles.dependsOn(tasks.buildSPrepGenerator)


// ------------------------------ Confusables Generation ------------------------------ //

task buildCFUGenerator << {
    ByteArrayOutputStream ostream = new ByteArrayOutputStream();
    try {
        exec {
            executable = "xcodebuild"

            args "-project", file("../moe.ios.core.native/android.external.icu/android.external.icu.xcodeproj").absolutePath
            args "-target", "gencfu"
            args "-configuration", "Release"

            setErrorOutput(ostream)
            setStandardOutput(ostream)
        }
    } catch(Exception ex) {
        throw new GradleScriptException("xcodebuild failed with: ${ostream}", ex);
    }
}

def cfuExecInput = file("../moe.ios.core.native/android.external.icu/build/xcode/Release/gencfu")
def cfuRuleInput = file("${android_path}/external/icu/icu4c/source/data/unidata/confusables.txt")
def cfuScriptInput = file("${android_path}/external/icu/icu4c/source/data/unidata/confusablesWholeScript.txt")

task generateCFUFile << {
	mkdir(icuOutput)

    def log = new ByteArrayOutputStream();
    try {
        exec {
            commandLine cfuExecInput

            args '-i', "${android_path}/external/icu/icu4c/source/stubdata"
            args '-r', cfuRuleInput.absolutePath
            args '-w', cfuScriptInput.absolutePath
            args '-d', icuOutput
            args '-o', outputs.files[0].name

            setErrorOutput(log)
            setStandardOutput(log)
        }
    } catch (Exception ex) {
        throw new GradleException("Could not generate cfu file: " + log.toString(), ex)
    }
}

tasks.generateCFUFile.inputs.files cfuExecInput
tasks.generateCFUFile.inputs.files cfuRuleInput
tasks.generateCFUFile.inputs.files cfuScriptInput
tasks.generateCFUFile.outputs.files new File(file(icuOutput), "confusables.cfu")
tasks.generateCFUFile.dependsOn(tasks.buildCFUGenerator)


// ------------------------------ ICU Data File Generation ------------------------------ //

task copyICUDataFiles(type: Copy, dependsOn:[generateSPrepFiles,generateCFUFile]) {
	from (file("${android_path}/external/icu/icu4c/source/data/in/coll/ucadata-implicithan.icu")) {
		into 'coll'
		rename { it.replace("-implicithan", "") }
	}

	file("${android_path}/external/icu/icu4c/source/data/in").listFiles().findAll { it.isFile() }.each {
		from it
	}

	into icuOutput
}


// ------------------------------ Misc ------------------------------ //

def android_java_sources = [
	"${android_path}/external/bouncycastle/bcprov/src/main/java",
	"${android_path}/external/conscrypt/src/main/java",
	"${android_path}/external/conscrypt/src/platform/java",
    "${android_path}/external/javasqlite/src/main/java",
	"${android_path}/external/okhttp/android/main/java",
	"${android_path}/external/okhttp/okhttp/src/main/java",
	"${android_path}/external/okhttp/okhttp-android-support/src/main/java",
	"${android_path}/external/okhttp/okhttp-urlconnection/src/main/java",
	"${android_path}/external/okhttp/okio/okio/src/main/java",
	"${android_path}/libcore/dalvik/src/main/java",
	"${android_path}/libcore/dex/src/main/java",
	"${android_path}/libcore/libart/src/main/java",
	"${android_path}/libcore/luni/src/main/java",
	"${android_path}/libcore/xml/src/main/java",
        "${android_path}/libcore/json/src/main/java",
	"${android_path}/external/icu/icu4j/main/classes/translit/src",
	"${android_path}/external/icu/icu4j/main/classes/core/src",
	"${android_path}/external/icu/icu4j/main/classes/collate/src",
	tasks.generateConscryptFiles.outputs.files[0].parentFile.absolutePath,
	icuBaseOutput.absolutePath,
    "${android_path}/frameworks/base/core/java",
]

sourceSets {
	styled {
        java {
            srcDirs = android_java_sources
            getFilter().exclude(new Spec<FileTreeElement>(){
			    public boolean isSatisfiedBy(    FileTreeElement element){
			      return !element.getFile().absolutePath.endsWith('okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java');
			    }
			});
        }
    }

    core {
    	java {
    		srcDirs = android_java_sources
    		exclude {
				it.file.absolutePath.endsWith('okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java')
			}
		}
		resources {
			srcDirs = java.srcDirs
		}
    }

    ios {}

    natj {}

    junit {}
}

project.getTasks().getByName("compileCoreJava").sourceCompatibility = "1.7"
project.getTasks().getByName("compileCoreJava").targetCompatibility = "1.7"
project.getTasks().getByName("compileCoreJava").dependsOn(tasks.generateConscryptFiles)
project.getTasks().getByName("compileCoreJava").dependsOn(tasks.copyICUDataFiles)

configurations {
	jarjarJar {}
	natjSources {}
	testSources {}
}

dependencies {

	String customRepo = System.getenv("MOE_MAVEN_ADDR")
	if ((customRepo == null) || (customRepo.length() == 0)) {
		customRepo = System.getenv("MOE_HOME")
	}
	if ((customRepo != null) && (customRepo.length() > 0)) {
		repositories {
			maven {
				url(customRepo)
			}
		}
	} else {
		println "MOE_MAVEN_ADDR variable was not set!"
	}

    repositories {
        mavenCentral()
    }

    checkstyle 'com.puppycrawl.tools:checkstyle:6.1.1'
    jarjarJar 'com.googlecode.jarjar:jarjar:1.3'

    compile 'org.moe:natj-api:1.0.+'

    natjSources 'org.moe:natj-api:1.0.+:sources'

    testCompile 'junit:junit:4.+'
    testSources 'junit:junit:4.+:sources'
	testSources 'org.hamcrest:hamcrest-core:1.+:sources'

	junitCompile 'junit:junit:4.+'
}

format {
    configurationFile = file('tools/android-formatting.xml')

    // Uncomment this if you want style format on Libcore
    files = /*sourceSets.main.java +*/ project.sourceSets.test.java
}

checkstyle {
    configFile = file('tools/checkstyle.xml')
    sourceSets = [sourceSets.test]
}

// Uncomment this if you want style check on Libcore
//tasks.compileJava.dependsOn("checkstyleStyledJavaSources")

// Don't run tests with the built-in junit
test { exclude '**' }

sourceCompatibility = "1.8"
targetCompatibility = "1.8"


// ------------------------------ NatJ Shpinx Generation ------------------------------ //

task unzipNatJSources(type: Copy) {
	from configurations.natjSources.collect { zipTree(it) }
	into file("build/unpacked/natj-sources")
}

task sphinxNatJSources(type: Exec, dependsOn:unzipNatJSources) {
	executable 'javasphinx-apidoc'

	environment = ['LC_ALL':'en_US.UTF-8', 'LANG':'en_US.UTF-8']

	def input = tasks.unzipNatJSources.outputs.files.getSingleFile()

	args input.absolutePath
	args '-c', file('build/javasphinxcache').absolutePath
	args '-u'
	args '-o', file('build/javasphinxoutput')
	args new File(input, 'org/moe/natj/org/').absolutePath
	args new File(input, 'org/moe/natj/general/ptr/impl/').absolutePath

	inputs.files input
	outputs.files file('build/javasphinxoutput')
}

task natjSphinxJar(type: Zip, dependsOn: sphinxNatJSources) {
	baseName 'moe'
	appendix 'ios'
	classifier 'natj-api-sphinx'

	tasks.sphinxNatJSources.outputs.each { from(it) }
	destinationDir file('build/libs/natj')
	extension 'jar'
    from (file('../eula/LICENSE.TXT'))
}


// ------------------------------ Core Jar Generation ------------------------------ //

task jarjaredCoreBaseJar(dependsOn: compileCoreJava) {
	inputs.files sourceSets.core.output
	outputs.files "build/libs/core/jarjared.jar"

	doLast {
		ant {
			taskdef(
				name: 'jarjar',
				classname: 'com.tonicsystems.jarjar.JarJarTask',
				classpath: configurations.jarjarJar.files[0]
			)
			jarjar(jarfile: outputs.files[0]) {
				sourceSets.core.output.each {
					fileset(dir: it)
				}
				rule(pattern: 'com.squareup.**', result: 'com.android.@1')
				rule(pattern: 'org.conscrypt.**', result: 'com.android.org.conscrypt.@1')
				rule(pattern: 'org.bouncycastle.**', result: 'com.android.org.bouncycastle.@1')
				rule(pattern: 'okio.**', result: 'com.android.okio.@1')
				rule(pattern: 'com.ibm.icu.**', result: 'android.icu.@1')
			}
		}
	}
}

task coreJar(type: Jar, dependsOn: jarjaredCoreBaseJar) {
	baseName 'moe'
	appendix 'ios'
	classifier 'core'

	from zipTree(jarjaredCoreBaseJar.outputs.files[0])
	from { [rootProject.file('LICENSE'), rootProject.file('NOTICE')] }
	destinationDir file('build/libs/core')
    from (file('../eula/LICENSE.TXT')) { into 'META-INF' }
}

task coreSourcesJar(type: Jar, dependsOn: compileCoreJava) {
	baseName 'moe'
	appendix 'ios'
	classifier 'core-sources'

	from rootProject.file('LICENSE'), rootProject.file('NOTICE')
	from sourceSets.core.allSource
	destinationDir file('build/libs/core-sources')
    from (file('../eula/LICENSE.TXT')) { into 'META-INF' }
}


def javaDocTitle = "moe.ios.core API"
// ------------------------------ Core Javadoc Jar Generation ------------------------------ //


task coreJavadoc(type: Javadoc) {
	title = javaDocTitle
	source sourceSets.core.allJava
	destinationDir = file('build/docs/coreJavadoc')
	include "**/*.java"
	if (JvmVersionMeets(8)) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

task coreJavadocJar(type: Jar, dependsOn: coreJavadoc) {
	baseName 'moe'
	appendix 'ios'
	classifier 'core-javadoc'

	from coreJavadoc.destinationDir
	from { [rootProject.file('LICENSE'), rootProject.file('NOTICE')] }
	destinationDir file('build/libs/core')
    from (file('../eula/LICENSE.TXT')) { into 'META-INF' }
}


// ------------------------------ iOS Jar Generation ------------------------------ //

task iosJar(type: Jar, dependsOn: compileJava) {
	baseName 'moe'
	appendix 'ios'
	classifier 'ios'

	from configurations.compile.collect {
		it.isDirectory() ? it : zipTree(it)
	} + [rootProject.file('LICENSE'), rootProject.file('NOTICE')]
	from sourceSets.main.output
	destinationDir file('build/libs/ios')
    from (file('../eula/LICENSE.TXT')) { into 'META-INF' }
}

task iosSourcesJar(type: Jar, dependsOn: iosJar) {
	baseName 'moe'
	appendix 'ios'
	classifier 'ios-sources'

	from rootProject.file('LICENSE'), rootProject.file('NOTICE')
	from sourceSets.main.allSource
	destinationDir file('build/libs/ios-sources')
    from (file('../eula/LICENSE.TXT')) { into 'META-INF' }
}


// ------------------------------ iOS Javadoc Jar Generation ------------------------------ //

task iosJavadoc(type: Javadoc) {
	title = javaDocTitle
	source sourceSets.main.allJava
	source configurations.natjSources.collect { zipTree(it) }
	destinationDir = file('build/docs/iosJavadoc')
	include "**/*.java"
	if (JvmVersionMeets(8)) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

task iosJavadocJar(type: Jar, dependsOn: iosJavadoc) {
	baseName 'moe'
	appendix 'ios'
	classifier 'ios-javadoc'

	from iosJavadoc.destinationDir
	from { [rootProject.file('LICENSE'), rootProject.file('NOTICE')] }
	destinationDir file('build/libs/ios')
    from (file('../eula/LICENSE.TXT')) { into 'META-INF' }
}


// ------------------------------ jUnit Jar Generation ------------------------------ //

task junitJar(type: Jar, dependsOn: compileTestJava) {
	baseName 'moe'
	appendix 'ios'
	classifier 'junit'
	from configurations.junitCompile.collect {
		it.isDirectory() ? it : zipTree(it)
	} + [rootProject.file('LICENSE'), rootProject.file('NOTICE')]
	from sourceSets.test.output
	destinationDir file('build/libs/junit')
    from (file('../eula/LICENSE.TXT')) { into 'META-INF' }
}

task junitSourcesJar(type: Jar, dependsOn: junitJar) {
	baseName 'moe'
	appendix 'ios'
	classifier 'junit-sources'

	from rootProject.file('LICENSE'), rootProject.file('NOTICE')
	from sourceSets.test.allSource
	destinationDir file('build/libs/junit-sources')
    from (file('../eula/LICENSE.TXT')) { into 'META-INF' }
}


// ------------------------------ jUnit Javadoc Jar Generation ------------------------------ //

task junitJavadoc(type: Javadoc, dependsOn: iosJar) {
	title = javaDocTitle
	source sourceSets.test.allJava
	source configurations.testSources.collect { zipTree(it) }
	classpath = iosJar.outputs.files
	destinationDir = file('build/docs/junitJavadoc')
	include "**/*.java"
	if (JvmVersionMeets(8)) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

task junitJavadocJar(type: Jar, dependsOn: junitJavadoc) {
	baseName 'moe'
	appendix 'ios'
	classifier 'junit-javadoc'

	from junitJavadoc.destinationDir
	from { [rootProject.file('LICENSE'), rootProject.file('NOTICE')] }
	destinationDir file('build/libs/junit')
    from (file('../eula/LICENSE.TXT')) { into 'META-INF' }
}
