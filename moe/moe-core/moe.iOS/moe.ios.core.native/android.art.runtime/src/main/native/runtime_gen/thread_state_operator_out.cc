/*
Copyright 2014-2016 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


#include <iostream>

#include "thread_state.h"

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const ThreadState& rhs) {
  switch (rhs) {
    case kTerminated: os << "Terminated"; break;
    case kRunnable: os << "Runnable"; break;
    case kTimedWaiting: os << "TimedWaiting"; break;
    case kSleeping: os << "Sleeping"; break;
    case kBlocked: os << "Blocked"; break;
    case kWaiting: os << "Waiting"; break;
    case kWaitingForGcToComplete: os << "WaitingForGcToComplete"; break;
    case kWaitingForCheckPointsToRun: os << "WaitingForCheckPointsToRun"; break;
    case kWaitingPerformingGc: os << "WaitingPerformingGc"; break;
    case kWaitingForDebuggerSend: os << "WaitingForDebuggerSend"; break;
    case kWaitingForDebuggerToAttach: os << "WaitingForDebuggerToAttach"; break;
    case kWaitingInMainDebuggerLoop: os << "WaitingInMainDebuggerLoop"; break;
    case kWaitingForDebuggerSuspension: os << "WaitingForDebuggerSuspension"; break;
    case kWaitingForJniOnLoad: os << "WaitingForJniOnLoad"; break;
    case kWaitingForSignalCatcherOutput: os << "WaitingForSignalCatcherOutput"; break;
    case kWaitingInMainSignalCatcherLoop: os << "WaitingInMainSignalCatcherLoop"; break;
    case kWaitingForDeoptimization: os << "WaitingForDeoptimization"; break;
    case kWaitingForMethodTracingStart: os << "WaitingForMethodTracingStart"; break;
    case kWaitingForVisitObjects: os << "WaitingForVisitObjects"; break;
    case kWaitingForGetObjectsAllocated: os << "WaitingForGetObjectsAllocated"; break;
    case kWaitingWeakGcRootRead: os << "WaitingWeakGcRootRead"; break;
    case kWaitingForGcThreadFlip: os << "WaitingForGcThreadFlip"; break;
    case kStarting: os << "Starting"; break;
    case kNative: os << "Native"; break;
    case kSuspended: os << "Suspended"; break;
    default: os << "ThreadState[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

