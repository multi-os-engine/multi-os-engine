/*
Copyright 2014-2016 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


#include <iostream>

#include "jdwp/jdwp_constants.h"

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace JDWP {
std::ostream& operator<<(std::ostream& os, const JdwpThreadStatus& rhs) {
  switch (rhs) {
    case TS_ZOMBIE: os << "TS_ZOMBIE"; break;
    case TS_RUNNING: os << "TS_RUNNING"; break;
    case TS_SLEEPING: os << "TS_SLEEPING"; break;
    case TS_MONITOR: os << "TS_MONITOR"; break;
    case TS_WAIT: os << "TS_WAIT"; break;
    default: os << "JdwpThreadStatus[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace JDWP
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace JDWP {
std::ostream& operator<<(std::ostream& os, const JdwpEventKind& rhs) {
  switch (rhs) {
    case EK_SINGLE_STEP: os << "EK_SINGLE_STEP"; break;
    case EK_BREAKPOINT: os << "EK_BREAKPOINT"; break;
    case EK_FRAME_POP: os << "EK_FRAME_POP"; break;
    case EK_EXCEPTION: os << "EK_EXCEPTION"; break;
    case EK_USER_DEFINED: os << "EK_USER_DEFINED"; break;
    case EK_THREAD_START: os << "EK_THREAD_START"; break;
    case EK_THREAD_DEATH: os << "EK_THREAD_DEATH"; break;
    case EK_CLASS_PREPARE: os << "EK_CLASS_PREPARE"; break;
    case EK_CLASS_UNLOAD: os << "EK_CLASS_UNLOAD"; break;
    case EK_CLASS_LOAD: os << "EK_CLASS_LOAD"; break;
    case EK_FIELD_ACCESS: os << "EK_FIELD_ACCESS"; break;
    case EK_FIELD_MODIFICATION: os << "EK_FIELD_MODIFICATION"; break;
    case EK_EXCEPTION_CATCH: os << "EK_EXCEPTION_CATCH"; break;
    case EK_METHOD_ENTRY: os << "EK_METHOD_ENTRY"; break;
    case EK_METHOD_EXIT: os << "EK_METHOD_EXIT"; break;
    case EK_METHOD_EXIT_WITH_RETURN_VALUE: os << "EK_METHOD_EXIT_WITH_RETURN_VALUE"; break;
    case EK_MONITOR_CONTENDED_ENTER: os << "EK_MONITOR_CONTENDED_ENTER"; break;
    case EK_MONITOR_CONTENDED_ENTERED: os << "EK_MONITOR_CONTENDED_ENTERED"; break;
    case EK_MONITOR_WAIT: os << "EK_MONITOR_WAIT"; break;
    case EK_MONITOR_WAITED: os << "EK_MONITOR_WAITED"; break;
    case EK_VM_START: os << "EK_VM_START"; break;
    case EK_VM_DEATH: os << "EK_VM_DEATH"; break;
    case EK_VM_DISCONNECTED: os << "EK_VM_DISCONNECTED"; break;
    default: os << "JdwpEventKind[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace JDWP
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace JDWP {
std::ostream& operator<<(std::ostream& os, const JdwpInvokeOptions& rhs) {
  switch (rhs) {
    case INVOKE_SINGLE_THREADED: os << "INVOKE_SINGLE_THREADED"; break;
    case INVOKE_NONVIRTUAL: os << "INVOKE_NONVIRTUAL"; break;
    default: os << "JdwpInvokeOptions[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace JDWP
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace JDWP {
std::ostream& operator<<(std::ostream& os, const JdwpSuspendPolicy& rhs) {
  switch (rhs) {
    case SP_NONE: os << "SP_NONE"; break;
    case SP_EVENT_THREAD: os << "SP_EVENT_THREAD"; break;
    case SP_ALL: os << "SP_ALL"; break;
    default: os << "JdwpSuspendPolicy[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace JDWP
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace JDWP {
std::ostream& operator<<(std::ostream& os, const JdwpError& rhs) {
  switch (rhs) {
    case ERR_NONE: os << "ERR_NONE"; break;
    case ERR_INVALID_THREAD: os << "ERR_INVALID_THREAD"; break;
    case ERR_INVALID_THREAD_GROUP: os << "ERR_INVALID_THREAD_GROUP"; break;
    case ERR_INVALID_PRIORITY: os << "ERR_INVALID_PRIORITY"; break;
    case ERR_THREAD_NOT_SUSPENDED: os << "ERR_THREAD_NOT_SUSPENDED"; break;
    case ERR_THREAD_SUSPENDED: os << "ERR_THREAD_SUSPENDED"; break;
    case ERR_THREAD_NOT_ALIVE: os << "ERR_THREAD_NOT_ALIVE"; break;
    case ERR_INVALID_OBJECT: os << "ERR_INVALID_OBJECT"; break;
    case ERR_INVALID_CLASS: os << "ERR_INVALID_CLASS"; break;
    case ERR_CLASS_NOT_PREPARED: os << "ERR_CLASS_NOT_PREPARED"; break;
    case ERR_INVALID_METHODID: os << "ERR_INVALID_METHODID"; break;
    case ERR_INVALID_LOCATION: os << "ERR_INVALID_LOCATION"; break;
    case ERR_INVALID_FIELDID: os << "ERR_INVALID_FIELDID"; break;
    case ERR_INVALID_FRAMEID: os << "ERR_INVALID_FRAMEID"; break;
    case ERR_NO_MORE_FRAMES: os << "ERR_NO_MORE_FRAMES"; break;
    case ERR_OPAQUE_FRAME: os << "ERR_OPAQUE_FRAME"; break;
    case ERR_NOT_CURRENT_FRAME: os << "ERR_NOT_CURRENT_FRAME"; break;
    case ERR_TYPE_MISMATCH: os << "ERR_TYPE_MISMATCH"; break;
    case ERR_INVALID_SLOT: os << "ERR_INVALID_SLOT"; break;
    case ERR_DUPLICATE: os << "ERR_DUPLICATE"; break;
    case ERR_NOT_FOUND: os << "ERR_NOT_FOUND"; break;
    case ERR_INVALID_MONITOR: os << "ERR_INVALID_MONITOR"; break;
    case ERR_NOT_MONITOR_OWNER: os << "ERR_NOT_MONITOR_OWNER"; break;
    case ERR_INTERRUPT: os << "ERR_INTERRUPT"; break;
    case ERR_INVALID_CLASS_FORMAT: os << "ERR_INVALID_CLASS_FORMAT"; break;
    case ERR_CIRCULAR_CLASS_DEFINITION: os << "ERR_CIRCULAR_CLASS_DEFINITION"; break;
    case ERR_FAILS_VERIFICATION: os << "ERR_FAILS_VERIFICATION"; break;
    case ERR_ADD_METHOD_NOT_IMPLEMENTED: os << "ERR_ADD_METHOD_NOT_IMPLEMENTED"; break;
    case ERR_SCHEMA_CHANGE_NOT_IMPLEMENTED: os << "ERR_SCHEMA_CHANGE_NOT_IMPLEMENTED"; break;
    case ERR_INVALID_TYPESTATE: os << "ERR_INVALID_TYPESTATE"; break;
    case ERR_HIERARCHY_CHANGE_NOT_IMPLEMENTED: os << "ERR_HIERARCHY_CHANGE_NOT_IMPLEMENTED"; break;
    case ERR_DELETE_METHOD_NOT_IMPLEMENTED: os << "ERR_DELETE_METHOD_NOT_IMPLEMENTED"; break;
    case ERR_UNSUPPORTED_VERSION: os << "ERR_UNSUPPORTED_VERSION"; break;
    case ERR_NAMES_DONT_MATCH: os << "ERR_NAMES_DONT_MATCH"; break;
    case ERR_CLASS_MODIFIERS_CHANGE_NOT_IMPLEMENTED: os << "ERR_CLASS_MODIFIERS_CHANGE_NOT_IMPLEMENTED"; break;
    case ERR_METHOD_MODIFIERS_CHANGE_NOT_IMPLEMENTED: os << "ERR_METHOD_MODIFIERS_CHANGE_NOT_IMPLEMENTED"; break;
    case ERR_NOT_IMPLEMENTED: os << "ERR_NOT_IMPLEMENTED"; break;
    case ERR_NULL_POINTER: os << "ERR_NULL_POINTER"; break;
    case ERR_ABSENT_INFORMATION: os << "ERR_ABSENT_INFORMATION"; break;
    case ERR_INVALID_EVENT_TYPE: os << "ERR_INVALID_EVENT_TYPE"; break;
    case ERR_ILLEGAL_ARGUMENT: os << "ERR_ILLEGAL_ARGUMENT"; break;
    case ERR_OUT_OF_MEMORY: os << "ERR_OUT_OF_MEMORY"; break;
    case ERR_ACCESS_DENIED: os << "ERR_ACCESS_DENIED"; break;
    case ERR_VM_DEAD: os << "ERR_VM_DEAD"; break;
    case ERR_INTERNAL: os << "ERR_INTERNAL"; break;
    case ERR_UNATTACHED_THREAD: os << "ERR_UNATTACHED_THREAD"; break;
    case ERR_INVALID_TAG: os << "ERR_INVALID_TAG"; break;
    case ERR_ALREADY_INVOKING: os << "ERR_ALREADY_INVOKING"; break;
    case ERR_INVALID_INDEX: os << "ERR_INVALID_INDEX"; break;
    case ERR_INVALID_LENGTH: os << "ERR_INVALID_LENGTH"; break;
    case ERR_INVALID_STRING: os << "ERR_INVALID_STRING"; break;
    case ERR_INVALID_CLASS_LOADER: os << "ERR_INVALID_CLASS_LOADER"; break;
    case ERR_INVALID_ARRAY: os << "ERR_INVALID_ARRAY"; break;
    case ERR_TRANSPORT_LOAD: os << "ERR_TRANSPORT_LOAD"; break;
    case ERR_TRANSPORT_INIT: os << "ERR_TRANSPORT_INIT"; break;
    case ERR_NATIVE_METHOD: os << "ERR_NATIVE_METHOD"; break;
    case ERR_INVALID_COUNT: os << "ERR_INVALID_COUNT"; break;
    default: os << "JdwpError[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace JDWP
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace JDWP {
std::ostream& operator<<(std::ostream& os, const JdwpClassStatus& rhs) {
  switch (rhs) {
    case CS_VERIFIED: os << "CS_VERIFIED"; break;
    case CS_PREPARED: os << "CS_PREPARED"; break;
    case CS_INITIALIZED: os << "CS_INITIALIZED"; break;
    case CS_ERROR: os << "CS_ERROR"; break;
    default: os << "JdwpClassStatus[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace JDWP
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace JDWP {
std::ostream& operator<<(std::ostream& os, const JdwpStepDepth& rhs) {
  switch (rhs) {
    case SD_INTO: os << "SD_INTO"; break;
    case SD_OVER: os << "SD_OVER"; break;
    case SD_OUT: os << "SD_OUT"; break;
    default: os << "JdwpStepDepth[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace JDWP
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace JDWP {
std::ostream& operator<<(std::ostream& os, const JdwpStepSize& rhs) {
  switch (rhs) {
    case SS_MIN: os << "SS_MIN"; break;
    case SS_LINE: os << "SS_LINE"; break;
    default: os << "JdwpStepSize[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace JDWP
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace JDWP {
std::ostream& operator<<(std::ostream& os, const JdwpSuspendStatus& rhs) {
  switch (rhs) {
    case SUSPEND_STATUS_NOT_SUSPENDED: os << "SUSPEND_STATUS_NOT_SUSPENDED"; break;
    case SUSPEND_STATUS_SUSPENDED: os << "SUSPEND_STATUS_SUSPENDED"; break;
    default: os << "JdwpSuspendStatus[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace JDWP
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace JDWP {
std::ostream& operator<<(std::ostream& os, const JdwpModKind& rhs) {
  switch (rhs) {
    case MK_COUNT: os << "MK_COUNT"; break;
    case MK_CONDITIONAL: os << "MK_CONDITIONAL"; break;
    case MK_THREAD_ONLY: os << "MK_THREAD_ONLY"; break;
    case MK_CLASS_ONLY: os << "MK_CLASS_ONLY"; break;
    case MK_CLASS_MATCH: os << "MK_CLASS_MATCH"; break;
    case MK_CLASS_EXCLUDE: os << "MK_CLASS_EXCLUDE"; break;
    case MK_LOCATION_ONLY: os << "MK_LOCATION_ONLY"; break;
    case MK_EXCEPTION_ONLY: os << "MK_EXCEPTION_ONLY"; break;
    case MK_FIELD_ONLY: os << "MK_FIELD_ONLY"; break;
    case MK_STEP: os << "MK_STEP"; break;
    case MK_INSTANCE_ONLY: os << "MK_INSTANCE_ONLY"; break;
    case MK_SOURCE_NAME_MATCH: os << "MK_SOURCE_NAME_MATCH"; break;
    default: os << "JdwpModKind[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace JDWP
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace JDWP {
std::ostream& operator<<(std::ostream& os, const JdwpTag& rhs) {
  switch (rhs) {
    case JT_ARRAY: os << "JT_ARRAY"; break;
    case JT_BYTE: os << "JT_BYTE"; break;
    case JT_CHAR: os << "JT_CHAR"; break;
    case JT_OBJECT: os << "JT_OBJECT"; break;
    case JT_FLOAT: os << "JT_FLOAT"; break;
    case JT_DOUBLE: os << "JT_DOUBLE"; break;
    case JT_INT: os << "JT_INT"; break;
    case JT_LONG: os << "JT_LONG"; break;
    case JT_SHORT: os << "JT_SHORT"; break;
    case JT_VOID: os << "JT_VOID"; break;
    case JT_BOOLEAN: os << "JT_BOOLEAN"; break;
    case JT_STRING: os << "JT_STRING"; break;
    case JT_THREAD: os << "JT_THREAD"; break;
    case JT_THREAD_GROUP: os << "JT_THREAD_GROUP"; break;
    case JT_CLASS_LOADER: os << "JT_CLASS_LOADER"; break;
    case JT_CLASS_OBJECT: os << "JT_CLASS_OBJECT"; break;
    default: os << "JdwpTag[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace JDWP
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace JDWP {
std::ostream& operator<<(std::ostream& os, const JdwpTypeTag& rhs) {
  switch (rhs) {
    case TT_CLASS: os << "TT_CLASS"; break;
    case TT_INTERFACE: os << "TT_INTERFACE"; break;
    case TT_ARRAY: os << "TT_ARRAY"; break;
    default: os << "JdwpTypeTag[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace JDWP
}  // namespace art

