/*
Copyright 2014-2016 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


#include <iostream>

#include "dex/quick/arm/arm_lir.h"

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const ArmOpDmbOptions& rhs) {
  switch (rhs) {
    case kSY: os << "SY"; break;
    case kST: os << "ST"; break;
    case kISH: os << "ISH"; break;
    case kISHST: os << "ISHST"; break;
    case kNSH: os << "NSH"; break;
    case kNSHST: os << "NSHST"; break;
    default: os << "ArmOpDmbOptions[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const ArmShiftEncodings& rhs) {
  switch (rhs) {
    case kArmLsl: os << "ArmLsl"; break;
    case kArmLsr: os << "ArmLsr"; break;
    case kArmAsr: os << "ArmAsr"; break;
    case kArmRor: os << "ArmRor"; break;
    default: os << "ArmShiftEncodings[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const ArmEncodingKind& rhs) {
  switch (rhs) {
    case kFmtUnused: os << "FmtUnused"; break;
    case kFmtBitBlt: os << "FmtBitBlt"; break;
    case kFmtLdmRegList: os << "FmtLdmRegList"; break;
    case kFmtStmRegList: os << "FmtStmRegList"; break;
    case kFmtDfp: os << "FmtDfp"; break;
    case kFmtSfp: os << "FmtSfp"; break;
    case kFmtModImm: os << "FmtModImm"; break;
    case kFmtImm16: os << "FmtImm16"; break;
    case kFmtImm6: os << "FmtImm6"; break;
    case kFmtImm12: os << "FmtImm12"; break;
    case kFmtShift: os << "FmtShift"; break;
    case kFmtLsb: os << "FmtLsb"; break;
    case kFmtBWidth: os << "FmtBWidth"; break;
    case kFmtShift5: os << "FmtShift5"; break;
    case kFmtBrOffset: os << "FmtBrOffset"; break;
    case kFmtFPImm: os << "FmtFPImm"; break;
    case kFmtOff24: os << "FmtOff24"; break;
    case kFmtSkip: os << "FmtSkip"; break;
    default: os << "ArmEncodingKind[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const ArmOpcode& rhs) {
  switch (rhs) {
    case kArmFirst: os << "ArmFirst"; break;
    case kThumbAdcRR: os << "ThumbAdcRR"; break;
    case kThumbAddRRI3: os << "ThumbAddRRI3"; break;
    case kThumbAddRI8: os << "ThumbAddRI8"; break;
    case kThumbAddRRR: os << "ThumbAddRRR"; break;
    case kThumbAddRRLH: os << "ThumbAddRRLH"; break;
    case kThumbAddRRHL: os << "ThumbAddRRHL"; break;
    case kThumbAddRRHH: os << "ThumbAddRRHH"; break;
    case kThumbAddPcRel: os << "ThumbAddPcRel"; break;
    case kThumbAddSpRel: os << "ThumbAddSpRel"; break;
    case kThumbAddSpI7: os << "ThumbAddSpI7"; break;
    case kThumbAndRR: os << "ThumbAndRR"; break;
    case kThumbAsrRRI5: os << "ThumbAsrRRI5"; break;
    case kThumbAsrRR: os << "ThumbAsrRR"; break;
    case kThumbBCond: os << "ThumbBCond"; break;
    case kThumbBUncond: os << "ThumbBUncond"; break;
    case kThumbBicRR: os << "ThumbBicRR"; break;
    case kThumbBkpt: os << "ThumbBkpt"; break;
    case kThumbBlx1: os << "ThumbBlx1"; break;
    case kThumbBlx2: os << "ThumbBlx2"; break;
    case kThumbBl1: os << "ThumbBl1"; break;
    case kThumbBl2: os << "ThumbBl2"; break;
    case kThumbBlxR: os << "ThumbBlxR"; break;
    case kThumbBx: os << "ThumbBx"; break;
    case kThumbCmnRR: os << "ThumbCmnRR"; break;
    case kThumbCmpRI8: os << "ThumbCmpRI8"; break;
    case kThumbCmpRR: os << "ThumbCmpRR"; break;
    case kThumbCmpLH: os << "ThumbCmpLH"; break;
    case kThumbCmpHL: os << "ThumbCmpHL"; break;
    case kThumbCmpHH: os << "ThumbCmpHH"; break;
    case kThumbEorRR: os << "ThumbEorRR"; break;
    case kThumbLdmia: os << "ThumbLdmia"; break;
    case kThumbLdrRRI5: os << "ThumbLdrRRI5"; break;
    case kThumbLdrRRR: os << "ThumbLdrRRR"; break;
    case kThumbLdrPcRel: os << "ThumbLdrPcRel"; break;
    case kThumbLdrSpRel: os << "ThumbLdrSpRel"; break;
    case kThumbLdrbRRI5: os << "ThumbLdrbRRI5"; break;
    case kThumbLdrbRRR: os << "ThumbLdrbRRR"; break;
    case kThumbLdrhRRI5: os << "ThumbLdrhRRI5"; break;
    case kThumbLdrhRRR: os << "ThumbLdrhRRR"; break;
    case kThumbLdrsbRRR: os << "ThumbLdrsbRRR"; break;
    case kThumbLdrshRRR: os << "ThumbLdrshRRR"; break;
    case kThumbLslRRI5: os << "ThumbLslRRI5"; break;
    case kThumbLslRR: os << "ThumbLslRR"; break;
    case kThumbLsrRRI5: os << "ThumbLsrRRI5"; break;
    case kThumbLsrRR: os << "ThumbLsrRR"; break;
    case kThumbMovImm: os << "ThumbMovImm"; break;
    case kThumbMovRR: os << "ThumbMovRR"; break;
    case kThumbMovRR_H2H: os << "ThumbMovRR_H2H"; break;
    case kThumbMovRR_H2L: os << "ThumbMovRR_H2L"; break;
    case kThumbMovRR_L2H: os << "ThumbMovRR_L2H"; break;
    case kThumbMul: os << "ThumbMul"; break;
    case kThumbMvn: os << "ThumbMvn"; break;
    case kThumbNeg: os << "ThumbNeg"; break;
    case kThumbOrr: os << "ThumbOrr"; break;
    case kThumbPop: os << "ThumbPop"; break;
    case kThumbPush: os << "ThumbPush"; break;
    case kThumbRev: os << "ThumbRev"; break;
    case kThumbRevsh: os << "ThumbRevsh"; break;
    case kThumbRorRR: os << "ThumbRorRR"; break;
    case kThumbSbc: os << "ThumbSbc"; break;
    case kThumbStmia: os << "ThumbStmia"; break;
    case kThumbStrRRI5: os << "ThumbStrRRI5"; break;
    case kThumbStrRRR: os << "ThumbStrRRR"; break;
    case kThumbStrSpRel: os << "ThumbStrSpRel"; break;
    case kThumbStrbRRI5: os << "ThumbStrbRRI5"; break;
    case kThumbStrbRRR: os << "ThumbStrbRRR"; break;
    case kThumbStrhRRI5: os << "ThumbStrhRRI5"; break;
    case kThumbStrhRRR: os << "ThumbStrhRRR"; break;
    case kThumbSubRRI3: os << "ThumbSubRRI3"; break;
    case kThumbSubRI8: os << "ThumbSubRI8"; break;
    case kThumbSubRRR: os << "ThumbSubRRR"; break;
    case kThumbSubSpI7: os << "ThumbSubSpI7"; break;
    case kThumbSwi: os << "ThumbSwi"; break;
    case kThumbTst: os << "ThumbTst"; break;
    case kThumb2Vldrs: os << "Thumb2Vldrs"; break;
    case kThumb2Vldrd: os << "Thumb2Vldrd"; break;
    case kThumb2Vmuls: os << "Thumb2Vmuls"; break;
    case kThumb2Vmuld: os << "Thumb2Vmuld"; break;
    case kThumb2Vstrs: os << "Thumb2Vstrs"; break;
    case kThumb2Vstrd: os << "Thumb2Vstrd"; break;
    case kThumb2Vsubs: os << "Thumb2Vsubs"; break;
    case kThumb2Vsubd: os << "Thumb2Vsubd"; break;
    case kThumb2Vadds: os << "Thumb2Vadds"; break;
    case kThumb2Vaddd: os << "Thumb2Vaddd"; break;
    case kThumb2Vdivs: os << "Thumb2Vdivs"; break;
    case kThumb2Vdivd: os << "Thumb2Vdivd"; break;
    case kThumb2VmlaF64: os << "Thumb2VmlaF64"; break;
    case kThumb2VcvtIF: os << "Thumb2VcvtIF"; break;
    case kThumb2VcvtFI: os << "Thumb2VcvtFI"; break;
    case kThumb2VcvtDI: os << "Thumb2VcvtDI"; break;
    case kThumb2VcvtFd: os << "Thumb2VcvtFd"; break;
    case kThumb2VcvtDF: os << "Thumb2VcvtDF"; break;
    case kThumb2VcvtF64S32: os << "Thumb2VcvtF64S32"; break;
    case kThumb2VcvtF64U32: os << "Thumb2VcvtF64U32"; break;
    case kThumb2Vsqrts: os << "Thumb2Vsqrts"; break;
    case kThumb2Vsqrtd: os << "Thumb2Vsqrtd"; break;
    case kThumb2MovI8M: os << "Thumb2MovI8M"; break;
    case kThumb2MovImm16: os << "Thumb2MovImm16"; break;
    case kThumb2StrRRI12: os << "Thumb2StrRRI12"; break;
    case kThumb2LdrRRI12: os << "Thumb2LdrRRI12"; break;
    case kThumb2StrRRI8Predec: os << "Thumb2StrRRI8Predec"; break;
    case kThumb2LdrRRI8Predec: os << "Thumb2LdrRRI8Predec"; break;
    case kThumb2Cbnz: os << "Thumb2Cbnz"; break;
    case kThumb2Cbz: os << "Thumb2Cbz"; break;
    case kThumb2AddRRI12: os << "Thumb2AddRRI12"; break;
    case kThumb2MovRR: os << "Thumb2MovRR"; break;
    case kThumb2Vmovs: os << "Thumb2Vmovs"; break;
    case kThumb2Vmovd: os << "Thumb2Vmovd"; break;
    case kThumb2Ldmia: os << "Thumb2Ldmia"; break;
    case kThumb2Stmia: os << "Thumb2Stmia"; break;
    case kThumb2AddRRR: os << "Thumb2AddRRR"; break;
    case kThumb2SubRRR: os << "Thumb2SubRRR"; break;
    case kThumb2SbcRRR: os << "Thumb2SbcRRR"; break;
    case kThumb2CmpRR: os << "Thumb2CmpRR"; break;
    case kThumb2SubRRI12: os << "Thumb2SubRRI12"; break;
    case kThumb2MvnI8M: os << "Thumb2MvnI8M"; break;
    case kThumb2Sel: os << "Thumb2Sel"; break;
    case kThumb2Ubfx: os << "Thumb2Ubfx"; break;
    case kThumb2Sbfx: os << "Thumb2Sbfx"; break;
    case kThumb2LdrRRR: os << "Thumb2LdrRRR"; break;
    case kThumb2LdrhRRR: os << "Thumb2LdrhRRR"; break;
    case kThumb2LdrshRRR: os << "Thumb2LdrshRRR"; break;
    case kThumb2LdrbRRR: os << "Thumb2LdrbRRR"; break;
    case kThumb2LdrsbRRR: os << "Thumb2LdrsbRRR"; break;
    case kThumb2StrRRR: os << "Thumb2StrRRR"; break;
    case kThumb2StrhRRR: os << "Thumb2StrhRRR"; break;
    case kThumb2StrbRRR: os << "Thumb2StrbRRR"; break;
    case kThumb2LdrhRRI12: os << "Thumb2LdrhRRI12"; break;
    case kThumb2LdrshRRI12: os << "Thumb2LdrshRRI12"; break;
    case kThumb2LdrbRRI12: os << "Thumb2LdrbRRI12"; break;
    case kThumb2LdrsbRRI12: os << "Thumb2LdrsbRRI12"; break;
    case kThumb2StrhRRI12: os << "Thumb2StrhRRI12"; break;
    case kThumb2StrbRRI12: os << "Thumb2StrbRRI12"; break;
    case kThumb2Pop: os << "Thumb2Pop"; break;
    case kThumb2Push: os << "Thumb2Push"; break;
    case kThumb2CmpRI8M: os << "Thumb2CmpRI8M"; break;
    case kThumb2CmnRI8M: os << "Thumb2CmnRI8M"; break;
    case kThumb2AdcRRR: os << "Thumb2AdcRRR"; break;
    case kThumb2AndRRR: os << "Thumb2AndRRR"; break;
    case kThumb2BicRRR: os << "Thumb2BicRRR"; break;
    case kThumb2CmnRR: os << "Thumb2CmnRR"; break;
    case kThumb2EorRRR: os << "Thumb2EorRRR"; break;
    case kThumb2MulRRR: os << "Thumb2MulRRR"; break;
    case kThumb2SdivRRR: os << "Thumb2SdivRRR"; break;
    case kThumb2UdivRRR: os << "Thumb2UdivRRR"; break;
    case kThumb2MnvRR: os << "Thumb2MnvRR"; break;
    case kThumb2RsubRRI8M: os << "Thumb2RsubRRI8M"; break;
    case kThumb2NegRR: os << "Thumb2NegRR"; break;
    case kThumb2OrrRRR: os << "Thumb2OrrRRR"; break;
    case kThumb2TstRR: os << "Thumb2TstRR"; break;
    case kThumb2LslRRR: os << "Thumb2LslRRR"; break;
    case kThumb2LsrRRR: os << "Thumb2LsrRRR"; break;
    case kThumb2AsrRRR: os << "Thumb2AsrRRR"; break;
    case kThumb2RorRRR: os << "Thumb2RorRRR"; break;
    case kThumb2LslRRI5: os << "Thumb2LslRRI5"; break;
    case kThumb2LsrRRI5: os << "Thumb2LsrRRI5"; break;
    case kThumb2AsrRRI5: os << "Thumb2AsrRRI5"; break;
    case kThumb2RorRRI5: os << "Thumb2RorRRI5"; break;
    case kThumb2BicRRI8M: os << "Thumb2BicRRI8M"; break;
    case kThumb2AndRRI8M: os << "Thumb2AndRRI8M"; break;
    case kThumb2OrrRRI8M: os << "Thumb2OrrRRI8M"; break;
    case kThumb2OrnRRI8M: os << "Thumb2OrnRRI8M"; break;
    case kThumb2EorRRI8M: os << "Thumb2EorRRI8M"; break;
    case kThumb2AddRRI8M: os << "Thumb2AddRRI8M"; break;
    case kThumb2AdcRRI8M: os << "Thumb2AdcRRI8M"; break;
    case kThumb2SubRRI8M: os << "Thumb2SubRRI8M"; break;
    case kThumb2SbcRRI8M: os << "Thumb2SbcRRI8M"; break;
    case kThumb2RevRR: os << "Thumb2RevRR"; break;
    case kThumb2RevshRR: os << "Thumb2RevshRR"; break;
    case kThumb2It: os << "Thumb2It"; break;
    case kThumb2Fmstat: os << "Thumb2Fmstat"; break;
    case kThumb2Vcmpd: os << "Thumb2Vcmpd"; break;
    case kThumb2Vcmps: os << "Thumb2Vcmps"; break;
    case kThumb2LdrPcRel12: os << "Thumb2LdrPcRel12"; break;
    case kThumb2BCond: os << "Thumb2BCond"; break;
    case kThumb2Fmrs: os << "Thumb2Fmrs"; break;
    case kThumb2Fmsr: os << "Thumb2Fmsr"; break;
    case kThumb2Fmrrd: os << "Thumb2Fmrrd"; break;
    case kThumb2Fmdrr: os << "Thumb2Fmdrr"; break;
    case kThumb2Vabsd: os << "Thumb2Vabsd"; break;
    case kThumb2Vabss: os << "Thumb2Vabss"; break;
    case kThumb2Vnegd: os << "Thumb2Vnegd"; break;
    case kThumb2Vnegs: os << "Thumb2Vnegs"; break;
    case kThumb2Vmovs_IMM8: os << "Thumb2Vmovs_IMM8"; break;
    case kThumb2Vmovd_IMM8: os << "Thumb2Vmovd_IMM8"; break;
    case kThumb2Mla: os << "Thumb2Mla"; break;
    case kThumb2Mls: os << "Thumb2Mls"; break;
    case kThumb2Umull: os << "Thumb2Umull"; break;
    case kThumb2Ldrex: os << "Thumb2Ldrex"; break;
    case kThumb2Ldrexd: os << "Thumb2Ldrexd"; break;
    case kThumb2Strex: os << "Thumb2Strex"; break;
    case kThumb2Strexd: os << "Thumb2Strexd"; break;
    case kThumb2Clrex: os << "Thumb2Clrex"; break;
    case kThumb2Bfi: os << "Thumb2Bfi"; break;
    case kThumb2Bfc: os << "Thumb2Bfc"; break;
    case kThumb2Dmb: os << "Thumb2Dmb"; break;
    case kThumb2LdrPcReln12: os << "Thumb2LdrPcReln12"; break;
    case kThumb2Stm: os << "Thumb2Stm"; break;
    case kThumbUndefined: os << "ThumbUndefined"; break;
    case kThumb2VPopCS: os << "Thumb2VPopCS"; break;
    case kThumb2VPushCS: os << "Thumb2VPushCS"; break;
    case kThumb2Vldms: os << "Thumb2Vldms"; break;
    case kThumb2Vstms: os << "Thumb2Vstms"; break;
    case kThumb2BUncond: os << "Thumb2BUncond"; break;
    case kThumb2Bl: os << "Thumb2Bl"; break;
    case kThumb2MovImm16H: os << "Thumb2MovImm16H"; break;
    case kThumb2AddPCR: os << "Thumb2AddPCR"; break;
    case kThumb2Adr: os << "Thumb2Adr"; break;
    case kThumb2MovImm16LST: os << "Thumb2MovImm16LST"; break;
    case kThumb2MovImm16HST: os << "Thumb2MovImm16HST"; break;
    case kThumb2LdmiaWB: os << "Thumb2LdmiaWB"; break;
    case kThumb2OrrRRRs: os << "Thumb2OrrRRRs"; break;
    case kThumb2Push1: os << "Thumb2Push1"; break;
    case kThumb2Pop1: os << "Thumb2Pop1"; break;
    case kThumb2RsubRRR: os << "Thumb2RsubRRR"; break;
    case kThumb2Smull: os << "Thumb2Smull"; break;
    case kThumb2LdrdPcRel8: os << "Thumb2LdrdPcRel8"; break;
    case kThumb2LdrdI8: os << "Thumb2LdrdI8"; break;
    case kThumb2StrdI8: os << "Thumb2StrdI8"; break;
    case kArmLast: os << "ArmLast"; break;
    default: os << "ArmOpcode[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const ArmResourceEncodingPos& rhs) {
  switch (rhs) {
    case kArmGPReg0: os << "ArmGPReg0"; break;
    case kArmRegSP: os << "ArmRegSP"; break;
    case kArmRegLR: os << "ArmRegLR"; break;
    case kArmRegPC: os << "ArmRegPC"; break;
    case kArmFPReg0: os << "ArmFPReg0"; break;
    case kArmFPReg16: os << "ArmFPReg16"; break;
    case kArmRegEnd: os << "ArmRegEnd"; break;
    default: os << "ArmResourceEncodingPos[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

