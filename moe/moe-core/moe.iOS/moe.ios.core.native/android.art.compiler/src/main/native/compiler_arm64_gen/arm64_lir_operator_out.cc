/*
Copyright 2014-2016 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


#include <iostream>

#include "dex/quick/arm64/arm64_lir.h"

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const A64ResourceEncodingPos& rhs) {
  switch (rhs) {
    case kA64GPReg0: os << "A64GPReg0"; break;
    case kA64RegLR: os << "A64RegLR"; break;
    case kA64RegSP: os << "A64RegSP"; break;
    case kA64FPReg0: os << "A64FPReg0"; break;
    case kA64RegEnd: os << "A64RegEnd"; break;
    default: os << "A64ResourceEncodingPos[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const A64EncodingKind& rhs) {
  switch (rhs) {
    case kFmtRegW: os << "FmtRegW"; break;
    case kFmtRegX: os << "FmtRegX"; break;
    case kFmtRegR: os << "FmtRegR"; break;
    case kFmtRegWOrSp: os << "FmtRegWOrSp"; break;
    case kFmtRegXOrSp: os << "FmtRegXOrSp"; break;
    case kFmtRegROrSp: os << "FmtRegROrSp"; break;
    case kFmtRegS: os << "FmtRegS"; break;
    case kFmtRegD: os << "FmtRegD"; break;
    case kFmtRegF: os << "FmtRegF"; break;
    case kFmtBitBlt: os << "FmtBitBlt"; break;
    case kFmtUnused: os << "FmtUnused"; break;
    case kFmtImm6Shift: os << "FmtImm6Shift"; break;
    case kFmtImm21: os << "FmtImm21"; break;
    case kFmtShift: os << "FmtShift"; break;
    case kFmtExtend: os << "FmtExtend"; break;
    case kFmtSkip: os << "FmtSkip"; break;
    default: os << "A64EncodingKind[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const A64OpDmbOptions& rhs) {
  switch (rhs) {
    case kSY: os << "SY"; break;
    case kST: os << "ST"; break;
    case kISH: os << "ISH"; break;
    case kISHST: os << "ISHST"; break;
    case kISHLD: os << "ISHLD"; break;
    case kNSH: os << "NSH"; break;
    case kNSHST: os << "NSHST"; break;
    default: os << "A64OpDmbOptions[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const A64Opcode& rhs) {
  switch (rhs) {
    case kA64First: os << "A64First"; break;
    case kA64Add4RRdT: os << "A64Add4RRdT"; break;
    case kA64Add4rrro: os << "A64Add4rrro"; break;
    case kA64Add4RRre: os << "A64Add4RRre"; break;
    case kA64Adr2xd: os << "A64Adr2xd"; break;
    case kA64Adrp2xd: os << "A64Adrp2xd"; break;
    case kA64And3Rrl: os << "A64And3Rrl"; break;
    case kA64And4rrro: os << "A64And4rrro"; break;
    case kA64Asr3rrd: os << "A64Asr3rrd"; break;
    case kA64Asr3rrr: os << "A64Asr3rrr"; break;
    case kA64B2ct: os << "A64B2ct"; break;
    case kA64Bfm4rrdd: os << "A64Bfm4rrdd"; break;
    case kA64Blr1x: os << "A64Blr1x"; break;
    case kA64Br1x: os << "A64Br1x"; break;
    case kA64Bl1t: os << "A64Bl1t"; break;
    case kA64Brk1d: os << "A64Brk1d"; break;
    case kA64B1t: os << "A64B1t"; break;
    case kA64Cbnz2rt: os << "A64Cbnz2rt"; break;
    case kA64Cbz2rt: os << "A64Cbz2rt"; break;
    case kA64Cmn3rro: os << "A64Cmn3rro"; break;
    case kA64Cmn3Rre: os << "A64Cmn3Rre"; break;
    case kA64Cmn3RdT: os << "A64Cmn3RdT"; break;
    case kA64Cmp3rro: os << "A64Cmp3rro"; break;
    case kA64Cmp3Rre: os << "A64Cmp3Rre"; break;
    case kA64Cmp3RdT: os << "A64Cmp3RdT"; break;
    case kA64Csel4rrrc: os << "A64Csel4rrrc"; break;
    case kA64Csinc4rrrc: os << "A64Csinc4rrrc"; break;
    case kA64Csinv4rrrc: os << "A64Csinv4rrrc"; break;
    case kA64Csneg4rrrc: os << "A64Csneg4rrrc"; break;
    case kA64Dmb1B: os << "A64Dmb1B"; break;
    case kA64Eor3Rrl: os << "A64Eor3Rrl"; break;
    case kA64Eor4rrro: os << "A64Eor4rrro"; break;
    case kA64Extr4rrrd: os << "A64Extr4rrrd"; break;
    case kA64Fabs2ff: os << "A64Fabs2ff"; break;
    case kA64Fadd3fff: os << "A64Fadd3fff"; break;
    case kA64Fcmp1f: os << "A64Fcmp1f"; break;
    case kA64Fcmp2ff: os << "A64Fcmp2ff"; break;
    case kA64Fcvtzs2wf: os << "A64Fcvtzs2wf"; break;
    case kA64Fcvtzs2xf: os << "A64Fcvtzs2xf"; break;
    case kA64Fcvt2Ss: os << "A64Fcvt2Ss"; break;
    case kA64Fcvt2sS: os << "A64Fcvt2sS"; break;
    case kA64Fcvtms2ws: os << "A64Fcvtms2ws"; break;
    case kA64Fcvtms2xS: os << "A64Fcvtms2xS"; break;
    case kA64Fdiv3fff: os << "A64Fdiv3fff"; break;
    case kA64Fmax3fff: os << "A64Fmax3fff"; break;
    case kA64Fmin3fff: os << "A64Fmin3fff"; break;
    case kA64Fmov2ff: os << "A64Fmov2ff"; break;
    case kA64Fmov2fI: os << "A64Fmov2fI"; break;
    case kA64Fmov2sw: os << "A64Fmov2sw"; break;
    case kA64Fmov2Sx: os << "A64Fmov2Sx"; break;
    case kA64Fmov2ws: os << "A64Fmov2ws"; break;
    case kA64Fmov2xS: os << "A64Fmov2xS"; break;
    case kA64Fmul3fff: os << "A64Fmul3fff"; break;
    case kA64Fneg2ff: os << "A64Fneg2ff"; break;
    case kA64Frintp2ff: os << "A64Frintp2ff"; break;
    case kA64Frintm2ff: os << "A64Frintm2ff"; break;
    case kA64Frintn2ff: os << "A64Frintn2ff"; break;
    case kA64Frintz2ff: os << "A64Frintz2ff"; break;
    case kA64Fsqrt2ff: os << "A64Fsqrt2ff"; break;
    case kA64Fsub3fff: os << "A64Fsub3fff"; break;
    case kA64Ldrb3wXd: os << "A64Ldrb3wXd"; break;
    case kA64Ldrb3wXx: os << "A64Ldrb3wXx"; break;
    case kA64Ldrsb3rXd: os << "A64Ldrsb3rXd"; break;
    case kA64Ldrsb3rXx: os << "A64Ldrsb3rXx"; break;
    case kA64Ldrh3wXF: os << "A64Ldrh3wXF"; break;
    case kA64Ldrh4wXxd: os << "A64Ldrh4wXxd"; break;
    case kA64Ldrsh3rXF: os << "A64Ldrsh3rXF"; break;
    case kA64Ldrsh4rXxd: os << "A64Ldrsh4rXxd"; break;
    case kA64Ldr2fp: os << "A64Ldr2fp"; break;
    case kA64Ldr2rp: os << "A64Ldr2rp"; break;
    case kA64Ldr3fXD: os << "A64Ldr3fXD"; break;
    case kA64Ldr3rXD: os << "A64Ldr3rXD"; break;
    case kA64Ldr4fXxG: os << "A64Ldr4fXxG"; break;
    case kA64Ldr4rXxG: os << "A64Ldr4rXxG"; break;
    case kA64LdrPost3rXd: os << "A64LdrPost3rXd"; break;
    case kA64Ldp4ffXD: os << "A64Ldp4ffXD"; break;
    case kA64Ldp4rrXD: os << "A64Ldp4rrXD"; break;
    case kA64LdpPost4rrXD: os << "A64LdpPost4rrXD"; break;
    case kA64Ldur3fXd: os << "A64Ldur3fXd"; break;
    case kA64Ldur3rXd: os << "A64Ldur3rXd"; break;
    case kA64Ldxr2rX: os << "A64Ldxr2rX"; break;
    case kA64Ldaxr2rX: os << "A64Ldaxr2rX"; break;
    case kA64Lsl3rrr: os << "A64Lsl3rrr"; break;
    case kA64Lsr3rrd: os << "A64Lsr3rrd"; break;
    case kA64Lsr3rrr: os << "A64Lsr3rrr"; break;
    case kA64Madd4rrrr: os << "A64Madd4rrrr"; break;
    case kA64Movk3rdM: os << "A64Movk3rdM"; break;
    case kA64Movn3rdM: os << "A64Movn3rdM"; break;
    case kA64Movz3rdM: os << "A64Movz3rdM"; break;
    case kA64Mov2rr: os << "A64Mov2rr"; break;
    case kA64Mvn2rr: os << "A64Mvn2rr"; break;
    case kA64Mul3rrr: os << "A64Mul3rrr"; break;
    case kA64Msub4rrrr: os << "A64Msub4rrrr"; break;
    case kA64Neg3rro: os << "A64Neg3rro"; break;
    case kA64Nop0: os << "A64Nop0"; break;
    case kA64Orr3Rrl: os << "A64Orr3Rrl"; break;
    case kA64Orr4rrro: os << "A64Orr4rrro"; break;
    case kA64Ret: os << "A64Ret"; break;
    case kA64Rbit2rr: os << "A64Rbit2rr"; break;
    case kA64Rev2rr: os << "A64Rev2rr"; break;
    case kA64Rev162rr: os << "A64Rev162rr"; break;
    case kA64Ror3rrr: os << "A64Ror3rrr"; break;
    case kA64Sbc3rrr: os << "A64Sbc3rrr"; break;
    case kA64Sbfm4rrdd: os << "A64Sbfm4rrdd"; break;
    case kA64Scvtf2fw: os << "A64Scvtf2fw"; break;
    case kA64Scvtf2fx: os << "A64Scvtf2fx"; break;
    case kA64Sdiv3rrr: os << "A64Sdiv3rrr"; break;
    case kA64Smull3xww: os << "A64Smull3xww"; break;
    case kA64Smulh3xxx: os << "A64Smulh3xxx"; break;
    case kA64Stp4ffXD: os << "A64Stp4ffXD"; break;
    case kA64Stp4rrXD: os << "A64Stp4rrXD"; break;
    case kA64StpPost4rrXD: os << "A64StpPost4rrXD"; break;
    case kA64StpPre4ffXD: os << "A64StpPre4ffXD"; break;
    case kA64StpPre4rrXD: os << "A64StpPre4rrXD"; break;
    case kA64Str3fXD: os << "A64Str3fXD"; break;
    case kA64Str4fXxG: os << "A64Str4fXxG"; break;
    case kA64Str3rXD: os << "A64Str3rXD"; break;
    case kA64Str4rXxG: os << "A64Str4rXxG"; break;
    case kA64Strb3wXd: os << "A64Strb3wXd"; break;
    case kA64Strb3wXx: os << "A64Strb3wXx"; break;
    case kA64Strh3wXF: os << "A64Strh3wXF"; break;
    case kA64Strh4wXxd: os << "A64Strh4wXxd"; break;
    case kA64StrPost3rXd: os << "A64StrPost3rXd"; break;
    case kA64Stur3fXd: os << "A64Stur3fXd"; break;
    case kA64Stur3rXd: os << "A64Stur3rXd"; break;
    case kA64Stxr3wrX: os << "A64Stxr3wrX"; break;
    case kA64Stlxr3wrX: os << "A64Stlxr3wrX"; break;
    case kA64Sub4RRdT: os << "A64Sub4RRdT"; break;
    case kA64Sub4rrro: os << "A64Sub4rrro"; break;
    case kA64Sub4RRre: os << "A64Sub4RRre"; break;
    case kA64Subs3rRd: os << "A64Subs3rRd"; break;
    case kA64Tst2rl: os << "A64Tst2rl"; break;
    case kA64Tst3rro: os << "A64Tst3rro"; break;
    case kA64Tbnz3rht: os << "A64Tbnz3rht"; break;
    case kA64Tbz3rht: os << "A64Tbz3rht"; break;
    case kA64Ubfm4rrdd: os << "A64Ubfm4rrdd"; break;
    case kA64Last: os << "A64Last"; break;
    case kA64Wide: os << "A64Wide"; break;
    default: os << "A64Opcode[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const A64ShiftEncodings& rhs) {
  switch (rhs) {
    case kA64Lsl: os << "A64Lsl"; break;
    case kA64Lsr: os << "A64Lsr"; break;
    case kA64Asr: os << "A64Asr"; break;
    case kA64Ror: os << "A64Ror"; break;
    default: os << "A64ShiftEncodings[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const A64RegExtEncodings& rhs) {
  switch (rhs) {
    case kA64Uxtb: os << "A64Uxtb"; break;
    case kA64Uxth: os << "A64Uxth"; break;
    case kA64Uxtw: os << "A64Uxtw"; break;
    case kA64Uxtx: os << "A64Uxtx"; break;
    case kA64Sxtb: os << "A64Sxtb"; break;
    case kA64Sxth: os << "A64Sxth"; break;
    case kA64Sxtw: os << "A64Sxtw"; break;
    case kA64Sxtx: os << "A64Sxtx"; break;
    default: os << "A64RegExtEncodings[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

