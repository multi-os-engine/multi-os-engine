diff --git a/src/idevice.c b/src/idevice.c
index 47c9ab4..00c7f60 100644
--- a/src/idevice.c
+++ b/src/idevice.c
@@ -29,6 +29,7 @@
 #include <string.h>
 #include <errno.h>
 #include <time.h>
+#include <sys/time.h>

 #include <usbmuxd.h>
 #ifdef HAVE_OPENSSL
@@ -657,6 +658,13 @@ static idevice_error_t internal_connection_receive_timeout(idevice_connection_t
 	return IDEVICE_E_UNKNOWN_ERROR;
 }
 
+// TODO: temporally code, move to utils?
+static long long microseconds() {
+	struct timeval tm;
+	gettimeofday(&tm,NULL);
+	return tm.tv_usec / 1000L;
+}
+
 LIBIMOBILEDEVICE_API idevice_error_t idevice_connection_receive_timeout(idevice_connection_t connection, char *data, uint32_t len, uint32_t *recv_bytes, unsigned int timeout)
 {
 	if (!connection || (connection->ssl_data && !connection->ssl_data->session) || len == 0) {
@@ -667,17 +675,22 @@ LIBIMOBILEDEVICE_API idevice_error_t idevice_connection_receive_timeout(idevice_
 		uint32_t received = 0;
 		int do_select = 1;
 
-		while (received < len) {
+		int timeout_left;
+	    long long timeout_ts = microseconds() + timeout;
+	    while (received < len && (timeout_left = timeout_ts - microseconds()) > 0) {
 #ifdef HAVE_OPENSSL
 			do_select = (SSL_pending(connection->ssl_data->session) == 0);
 #endif
 			if (do_select) {
-				int conn_error = socket_check_fd((int)(long)connection->data, FDM_READ, timeout);
+				int conn_error = socket_check_fd((int)(long)connection->data, FDM_READ, timeout_left);
 				idevice_error_t error = socket_recv_to_idevice_error(conn_error, len, received);
 
 				switch (error) {
 					case IDEVICE_E_SUCCESS:
 						break;
+					case IDEVICE_E_TIMEOUT:
+						*recv_bytes = received;
+						return IDEVICE_E_TIMEOUT;
 					case IDEVICE_E_UNKNOWN_ERROR:
 					default:
 						debug_info("ERROR: socket_check_fd returned %d (%s)", conn_error, strerror(-conn_error));
@@ -693,26 +706,31 @@ LIBIMOBILEDEVICE_API idevice_error_t idevice_connection_receive_timeout(idevice_
 				int sslerr = SSL_get_error(connection->ssl_data->session, r);
 				if (sslerr == SSL_ERROR_WANT_READ) {
 					continue;
+				} else if (sslerr == SSL_ERROR_ZERO_RETURN) {
+					break;
 				}
-				break;
+				*recv_bytes = 0;
+				return IDEVICE_E_SSL_ERROR;
 			}
 #else
 			ssize_t r = gnutls_record_recv(connection->ssl_data->session, (void*)(data+received), (size_t)len-received);
 			if (r > 0) {
 				received += r;
-			} else {
+			} else if (r == 0) {
 				break;
+			} else {
+				*recv_bytes = 0;
+				return IDEVICE_E_SSL_ERROR;
 			}
 #endif
 		}
 
 		debug_info("SSL_read %d, received %d", len, received);
+		*recv_bytes = received;
 		if (received < len) {
-			*recv_bytes = 0;
-			return IDEVICE_E_SSL_ERROR;
+			return IDEVICE_E_TIMEOUT;
 		}
 
-		*recv_bytes = received;
 		return IDEVICE_E_SUCCESS;
 	}
 	return internal_connection_receive_timeout(connection, data, len, recv_bytes, timeout);
