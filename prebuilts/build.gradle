/*
Copyright (C) 2016 Migeran

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import org.moe.prebuilts.Script

apply plugin: 'idea'

idea {
    module {
        excludeDirs += file('llvm')
        excludeDirs += file('mingw')
    }
}

task prebuildAll {}

task cleanAll {
    doLast {
        delete('build')
        delete('llvm')
        delete('mingw')
    }
}

subprojects {
    it.afterEvaluate {
        prebuildAll.dependsOn it.tasks['prebuild']
        cleanAll.dependsOn it.tasks['clean']
    }
}

ext.isAppleSilicon = System.getProperty("os.arch") == "aarch64"

def brewPath(suffix) {
    return (isAppleSilicon ? "/opt/homebrew/" : "/usr/local/") + suffix
}

task linuxCrosscompiler(type: Script) {
    progress 'Downloading crosscompiler'
    workDir 'linux-crosscompiler'
    if (isAppleSilicon) {
        download("linux_crosscompiler.zip", "https://github.com/messense/homebrew-macos-cross-toolchains/releases/download/v1.1.0/x86_64-unknown-linux-gnu-aarch64-darwin.zip")
    } else {
        download("linux_crosscompiler.zip", "https://github.com/messense/homebrew-macos-cross-toolchains/releases/download/v1.1.0/x86_64-unknown-linux-gnu-x86_64-darwin.zip")
    }
    exec 'rm', '-rf', 'linux_crosscompiler'
    exec 'unzip', '-o', 'linux_crosscompiler.zip'
}

def binutils_version = 'binutils-2.33.1'
def mingw_version = 'mingw-w64-v7.0.0'
def gcc_version = 'gcc-13.2.0'

task mingw(type: Script) {
    progress 'Checking system dependencies'
    new ByteArrayOutputStream().withStream { os ->
        try {
            def result = exec { spec ->
                spec.setExecutable("xcrun");
                spec.args("--show-sdk-path");
                standardOutput = os
            }
            print "MacOSX SDK found at $os"
        } catch (ExecException) {
            throw new GradleException("Cannot find a valid MacOSX SDK! Please make sure the Command Line Tools is installed!")
        }
    }

    progress 'Checking brew dependencies'

    workDir 'mingw'

    def BREW_GMP = checkDir brewPath('./opt/gmp')
    def BREW_MPFR = checkDir brewPath('./opt/mpfr')
    def BREW_MPC = checkDir brewPath('./opt/libmpc')
    def BREW_CLOOG = checkDir brewPath('./opt/cloog')
    def BREW_ISL = checkDir brewPath('./opt/isl')

    progress "Downloading $binutils_version"
    workDir 'mingw'
    download "${binutils_version}.tar.bz2", "http://ftp.gnu.org/gnu/binutils/${binutils_version}.tar.bz2"
    exec 'rm', '-rf', "${binutils_version}"
    exec 'tar', 'xjf', "${binutils_version}.tar.bz2"

    progress "Building 64-bit $binutils_version"
    workDir "mingw/${binutils_version}/build64"
    exec '../configure', '--target=x86_64-w64-mingw32',
            '--disable-werror', '--disable-multilib',
            "--prefix=${file('mingw').absolutePath}",
            "--with-sysroot=${file('mingw').absolutePath}",
            '--enable-64-bit-bfd'
    exec 'make'
    exec 'make', "install-strip"

    progress "Downloading $mingw_version"
    workDir 'mingw'
    download "${mingw_version}.tar.bz2", "http://downloads.sourceforge.net/project/mingw-w64/mingw-w64/mingw-w64-release/${mingw_version}.tar.bz2"
    exec 'rm', '-rf', "${mingw_version}"
    exec 'tar', 'xjf', "${mingw_version}.tar.bz2"

    progress "Building 64-bit $mingw_version"
    workDir "mingw/${mingw_version}/build-headers64"
    exec "../mingw-w64-headers/configure", "--host=x86_64-w64-mingw32",
            "--prefix=${file('mingw').absolutePath}/x86_64-w64-mingw32"
    exec 'make'
    exec 'make', "install-strip"
    rawWorkDir 'mingw/x86_64-w64-mingw32'
    exec 'rm', '-f', 'lib64'
    exec 'ln', '-s', 'lib', 'lib64'

    progress "Downloading $gcc_version"
    workDir 'mingw'
    download "${gcc_version}.tar.xz", "https://ftp.gnu.org/gnu/gcc/${gcc_version}/${gcc_version}.tar.xz"
    exec 'rm', '-rf', "${gcc_version}"
    exec 'tar', 'xjf', "${gcc_version}.tar.xz"

    env 'PATH', "${file('mingw').absolutePath}/bin:${System.getenv('PATH')}"

    progress "Building 64-bit $gcc_version"
    rawWorkDir 'mingw'
    exec 'rm', '-f', 'mingw'
    exec 'ln', '-s', 'x86_64-w64-mingw32', 'mingw'

    // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=111632
    workDir "mingw/${gcc_version}"
    exec 'git', 'apply', '../../../mingw-xcode15-fix.patch'
    exec 'git', 'apply', '../../../mingw-fix-libc.patch'
    exec 'git', 'apply', '../../../mingw-disable-tzdb.patch'

    workDir "mingw/${gcc_version}/build64"
    exec '../configure', '--target=x86_64-w64-mingw32',
            '--disable-multilib', '--enable-languages=c,c++,objc,obj-c++',
            "--with-gmp=$BREW_GMP", "--with-mpfr=$BREW_MPFR", "--with-mpc=$BREW_MPC", "--with-cloog=$BREW_CLOOG", "--with-isl=$BREW_ISL",
            '--with-system-zlib', '--enable-version-specific-runtime-libs', '--enable-libstdcxx-time=yes', '--enable-stage1-checking',
            '--enable-checking=release', '--enable-lto', '--enable-threads=win32',
            "--prefix=${file('mingw').absolutePath}",
            "--with-sysroot=${file('mingw').absolutePath}"
    exec 'make', 'all-gcc', "-j${Runtime.getRuntime().availableProcessors()}"
    exec 'make', "install-gcc"

    progress "Building 64-bit $mingw_version runtime"
    rawWorkDir 'mingw'
    exec 'rm', 'mingw'
    exec 'ln', '-s', 'x86_64-w64-mingw32', 'mingw'
    workDir "mingw/${mingw_version}/build-crt64"
    exec '../mingw-w64-crt/configure', '--host=x86_64-w64-mingw32',
            "--prefix=${file('mingw').absolutePath}/x86_64-w64-mingw32",
            "--with-sysroot=${file('mingw').absolutePath}"
    exec 'make'
    exec 'make', "install-strip"

    progress "Completing 64-bit $gcc_version"
    rawWorkDir 'mingw'
    exec 'rm', 'mingw'
    exec 'ln', '-s', 'x86_64-w64-mingw32', 'mingw'
    workDir "mingw/${gcc_version}/build64"
    exec 'make'
    exec 'make', "install-strip"

    rawWorkDir 'mingw'
    exec 'rm', 'mingw'

    rawWorkDir 'mingw/x86_64-w64-mingw32/lib'
    exec 'ln', '-s', '../../lib/gcc/x86_64-w64-mingw32/lib/libgcc_s.a', './'
    exec 'ln', '-s', '../../lib/gcc/x86_64-w64-mingw32/lib/libgcc.a', './'

    progress "Building 64-bit $mingw_version winpthreads"
    workDir "mingw/${mingw_version}/mingw-w64-libraries/winpthreads/build64"
    exec '../configure', '--host=x86_64-w64-mingw32',
            "--prefix=${file('mingw').absolutePath}/x86_64-w64-mingw32"
    exec 'make'
    exec 'make', "install-strip"
}

task mingwPresence() {
    doLast {
        if (!file('mingw').exists()) {
            throw new GradleException("MinGW is not built")
        }
    }
}

task llvm(type: Script) {
    progress 'Checking brew dependencies'
    def BREW_CMAKE = checkDir brewPath('./opt/cmake')
    def isNew = !file('build/llvm/macos/Makefile').exists()

    progress 'Creating LLVM makefiles'
    workDir 'llvm/macos'
    if (isNew) {
        exec 'cmake',
                '-DCMAKE_BUILD_TYPE=MinSizeRel',
                '-DCMAKE_INSTALL_PREFIX=' + file('llvm/macos').absolutePath,
                '-DCMAKE_OSX_ARCHITECTURES=arm64;x86_64',
                '-DLLVM_TARGETS_TO_BUILD=AArch64;ARM;X86',
                '-DLLVM_BUILD_TOOLS=OFF',
                '-DLLVM_BUILD_EXAMPLES=OFF',
                '-DLLVM_ENABLE_PROJECTS=clang',
                '-G', 'Unix Makefiles',
                file('../../external/llvm/llvm').absolutePath
    }

    progress 'Building LLVM'
    exec 'make', "-j${Runtime.getRuntime().availableProcessors()}"
    exec 'make', 'install'
}

task llvmPresence() {
    doLast {
        if (!file('llvm').exists()) {
            throw new GradleException("LLVM is not built")
        }
    }
}
