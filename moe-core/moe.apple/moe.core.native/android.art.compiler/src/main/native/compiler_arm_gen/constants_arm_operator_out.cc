/*
Copyright 2014-2016 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


#include <iostream>

#include "utils/arm/constants_arm.h"

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace arm {
std::ostream& operator<<(std::ostream& os, const Opcode& rhs) {
  switch (rhs) {
    case kNoOperand: os << "NoOperand"; break;
    case AND: os << "AND"; break;
    case EOR: os << "EOR"; break;
    case SUB: os << "SUB"; break;
    case RSB: os << "RSB"; break;
    case ADD: os << "ADD"; break;
    case ADC: os << "ADC"; break;
    case SBC: os << "SBC"; break;
    case RSC: os << "RSC"; break;
    case TST: os << "TST"; break;
    case TEQ: os << "TEQ"; break;
    case CMP: os << "CMP"; break;
    case CMN: os << "CMN"; break;
    case ORR: os << "ORR"; break;
    case MOV: os << "MOV"; break;
    case BIC: os << "BIC"; break;
    case MVN: os << "MVN"; break;
    case kMaxOperand: os << "MaxOperand"; break;
    default: os << "Opcode[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace arm
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace arm {
std::ostream& operator<<(std::ostream& os, const Shift& rhs) {
  switch (rhs) {
    case kNoShift: os << "NoShift"; break;
    case LSL: os << "LSL"; break;
    case LSR: os << "LSR"; break;
    case ASR: os << "ASR"; break;
    case ROR: os << "ROR"; break;
    case RRX: os << "RRX"; break;
    case kMaxShift: os << "MaxShift"; break;
    default: os << "Shift[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace arm
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace arm {
std::ostream& operator<<(std::ostream& os, const ScaleFactor& rhs) {
  switch (rhs) {
    case TIMES_1: os << "TIMES_1"; break;
    case TIMES_2: os << "TIMES_2"; break;
    case TIMES_4: os << "TIMES_4"; break;
    case TIMES_8: os << "TIMES_8"; break;
    default: os << "ScaleFactor[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace arm
}  // namespace art

// This was automatically generated by /Volumes/Android/inde-dev//art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace arm {
std::ostream& operator<<(std::ostream& os, const DmbOptions& rhs) {
  switch (rhs) {
    case SY: os << "SY"; break;
    case ST: os << "ST"; break;
    case ISH: os << "ISH"; break;
    case ISHST: os << "ISHST"; break;
    case NSH: os << "NSH"; break;
    case NSHST: os << "NSHST"; break;
    default: os << "DmbOptions[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace arm
}  // namespace art

