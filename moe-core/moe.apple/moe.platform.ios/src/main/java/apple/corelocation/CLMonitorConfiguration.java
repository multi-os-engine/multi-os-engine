package apple.corelocation;

import apple.NSObject;
import apple.foundation.NSArray;
import apple.foundation.NSMethodSignature;
import apple.foundation.NSSet;
import apple.opaque.dispatch_queue_t;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.moe.natj.c.ann.FunctionPtr;
import org.moe.natj.general.NatJ;
import org.moe.natj.general.Pointer;
import org.moe.natj.general.ann.Generated;
import org.moe.natj.general.ann.Library;
import org.moe.natj.general.ann.Mapped;
import org.moe.natj.general.ann.NInt;
import org.moe.natj.general.ann.NUInt;
import org.moe.natj.general.ann.Owned;
import org.moe.natj.general.ann.Runtime;
import org.moe.natj.general.ptr.VoidPtr;
import org.moe.natj.objc.Class;
import org.moe.natj.objc.ObjCRuntime;
import org.moe.natj.objc.SEL;
import org.moe.natj.objc.ann.ObjCBlock;
import org.moe.natj.objc.ann.ObjCClassBinding;
import org.moe.natj.objc.ann.Selector;
import org.moe.natj.objc.map.ObjCObjectMapper;

/**
 * API-Since: 17.0
 */
@Generated
@Library("CoreLocation")
@Runtime(ObjCRuntime.class)
@ObjCClassBinding
public class CLMonitorConfiguration extends NSObject {
    static {
        NatJ.register();
    }

    @Generated
    protected CLMonitorConfiguration(Pointer peer) {
        super(peer);
    }

    @Generated
    @Selector("accessInstanceVariablesDirectly")
    public static native boolean accessInstanceVariablesDirectly();

    @Generated
    @Owned
    @Selector("alloc")
    public static native CLMonitorConfiguration alloc();

    @Generated
    @Owned
    @Selector("allocWithZone:")
    public static native CLMonitorConfiguration allocWithZone(VoidPtr zone);

    @Generated
    @Selector("automaticallyNotifiesObserversForKey:")
    public static native boolean automaticallyNotifiesObserversForKey(@NotNull String key);

    @Generated
    @Selector("cancelPreviousPerformRequestsWithTarget:")
    public static native void cancelPreviousPerformRequestsWithTarget(
            @Mapped(ObjCObjectMapper.class) @NotNull Object aTarget);

    @Generated
    @Selector("cancelPreviousPerformRequestsWithTarget:selector:object:")
    public static native void cancelPreviousPerformRequestsWithTargetSelectorObject(
            @Mapped(ObjCObjectMapper.class) @NotNull Object aTarget, @NotNull SEL aSelector,
            @Mapped(ObjCObjectMapper.class) @Nullable Object anArgument);

    @Generated
    @Selector("classFallbacksForKeyedArchiver")
    @NotNull
    public static native NSArray<String> classFallbacksForKeyedArchiver();

    @Generated
    @Selector("classForKeyedUnarchiver")
    @NotNull
    public static native Class classForKeyedUnarchiver();

    /**
     * Returns a configuration object which may be used to create or open
     * an instance of `CLMonitor`.
     * 
     * name : Identifies the instance of `CLMonitor` which should be created or opened.
     * `name` should contain only alpha-numeric characters and cannot start with "_".
     * queue : Dispatch queue which should be used to synchronize access to the CLMonitor instance.
     * All interactions related to the `CLMonitor` instance should be performed on this queue.
     * Events generated by the `CLMonitor` instance will be delivered to the handler on this queue.
     * Accessing `CLMonitor` outside of the queue will result in undefined behavior.
     * handler : The callback handler to be submitted to `queue`
     * for each event.
     */
    @Generated
    @Selector("configWithMonitorName:queue:eventHandler:")
    @NotNull
    public static native CLMonitorConfiguration configWithMonitorNameQueueEventHandler(@NotNull String name,
            @NotNull dispatch_queue_t queue,
            @ObjCBlock(name = "call_configWithMonitorNameQueueEventHandler") @NotNull Block_configWithMonitorNameQueueEventHandler eventHandler);

    @Runtime(ObjCRuntime.class)
    @Generated
    public interface Block_configWithMonitorNameQueueEventHandler {
        @Generated
        void call_configWithMonitorNameQueueEventHandler(@NotNull CLMonitor monitor, @NotNull CLMonitoringEvent event);
    }

    @Generated
    @Selector("debugDescription")
    public static native String debugDescription_static();

    @Generated
    @Selector("description")
    public static native String description_static();

    /**
     * handler
     * 
     * Discussion:
     * Handler block which will be used as the event handler for the `CLMonitor` instance.
     */
    @Generated
    @Selector("eventHandler")
    @ObjCBlock(name = "call_eventHandler_ret")
    @NotNull
    public native Block_eventHandler_ret eventHandler();

    @Runtime(ObjCRuntime.class)
    @Generated
    public interface Block_eventHandler_ret {
        @Generated
        void call_eventHandler_ret(@NotNull CLMonitor arg0, @NotNull CLMonitoringEvent arg1);
    }

    @Generated
    @Selector("hash")
    @NUInt
    public static native long hash_static();

    @Generated
    @Selector("init")
    public native CLMonitorConfiguration init();

    @Generated
    @Selector("instanceMethodForSelector:")
    @FunctionPtr(name = "call_instanceMethodForSelector_ret")
    public static native NSObject.Function_instanceMethodForSelector_ret instanceMethodForSelector(SEL aSelector);

    @Generated
    @Selector("instanceMethodSignatureForSelector:")
    public static native NSMethodSignature instanceMethodSignatureForSelector(SEL aSelector);

    @Generated
    @Selector("instancesRespondToSelector:")
    public static native boolean instancesRespondToSelector(SEL aSelector);

    @Generated
    @Selector("isSubclassOfClass:")
    public static native boolean isSubclassOfClass(Class aClass);

    @Generated
    @Selector("keyPathsForValuesAffectingValueForKey:")
    @NotNull
    public static native NSSet<String> keyPathsForValuesAffectingValueForKey(@NotNull String key);

    /**
     * name
     * 
     * Discussion:
     * Name of the Monitor instance to create or open.
     */
    @Generated
    @Selector("name")
    @NotNull
    public native String name();

    @Generated
    @Owned
    @Selector("new")
    public static native CLMonitorConfiguration new_objc();

    /**
     * queue
     * 
     * Discussion:
     * Dispatch queue to which the instance of `CLMonitor` will be bound.
     */
    @Generated
    @Selector("queue")
    @NotNull
    public native dispatch_queue_t queue();

    @Generated
    @Selector("resolveClassMethod:")
    public static native boolean resolveClassMethod(SEL sel);

    @Generated
    @Selector("resolveInstanceMethod:")
    public static native boolean resolveInstanceMethod(SEL sel);

    @Generated
    @Selector("setVersion:")
    public static native void setVersion_static(@NInt long aVersion);

    @Generated
    @Selector("superclass")
    public static native Class superclass_static();

    @Generated
    @Deprecated
    @Selector("useStoredAccessor")
    public static native boolean useStoredAccessor();

    @Generated
    @Selector("version")
    @NInt
    public static native long version_static();
}