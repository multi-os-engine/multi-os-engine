/*
Copyright 2014-2016 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import org.moe.prebuilts.Script

plugins {
    id 'org.moe.buildtools'
}

apply plugin: 'base'

version '1.10.1-SNAPSHOT'

allprojects {
    repositories {
        mavenCentral()
    }
}

ext {
    external = [:]
    external.prebuilts = file('../prebuilts').absolutePath
}

/*
 * PROJECT: moe/natj
 */
ext {
    external.natj = [:]
    external.natj.root = file('../natj').absolutePath
    external.natj.sources = file("${external.natj.root}/src/main/java")
    external.natj.jnipath = file("${external.natj.root}/natj-mac/build/xcode/Release")
}
for (target in [[name: 'ios', outputs: ["${external.natj.root}/natj-ios/build/xcode/Release-iphoneos/libnatj.a",
                                        "${external.natj.root}/natj-ios/build/xcode/Release-iphonesimulator/libnatj.a"]],
                [name: 'mac', outputs: ["${external.natj.root}/natj-mac/build/xcode/Release/libnatj.dylib"]],
                [name: 'win', outputs: ["${external.natj.root}/natj-win/build/Release-Win64/natj.dll"]]]) {
    external.natj[target.name] = target.outputs.collect { file(it) }

    task("ext_natj_${target.name}") {
        dependsOn gradle.includedBuild("natj").task(":natj-${target.name}:build")
    }
}

subprojects.each { subproject ->
    subproject.afterEvaluate {
        subproject.tasks.matching { it.name == "build" }.all { buildTask ->
            build.dependsOn buildTask
        }
    }
}

def createBrewCheckExecTask(def execname) {
    tasks.create("check_exec_${execname}", Script) {
        workDir '.'
        failureMessage """
    Error: ${execname} is not installed, please run `brew install ${execname}` to install.
"""
        exec 'which', execname
    }
}

def createCheckExecTask(def execname, def failmsg) {
    tasks.create("check_exec_${execname}", Script) {
        workDir '.'
        failureMessage failmsg
        exec 'which', execname
    }
}

tasks.check {
    dependsOn createBrewCheckExecTask('autogen')
    dependsOn createBrewCheckExecTask('autoconf')
    dependsOn createBrewCheckExecTask('automake')
    dependsOn createBrewCheckExecTask('libtool')
    dependsOn createBrewCheckExecTask('pkg-config')
    dependsOn createBrewCheckExecTask('wget')
    dependsOn createBrewCheckExecTask('cloog')
    dependsOn createBrewCheckExecTask('cmake')
    dependsOn createBrewCheckExecTask('gpg')
    dependsOn createBrewCheckExecTask('ant')
    dependsOn createCheckExecTask('premake5', """
    Error: premake5 is not installed, please run the following to install:

        brew install file://${file('dependencies/premake5.rb').absolutePath}
""")
}
